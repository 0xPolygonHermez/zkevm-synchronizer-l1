// Code generated by mockery. DO NOT EDIT.

package mock_etherman

import (
	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/0xPolygonHermez/zkevm-synchronizer-l1/etherman/types"
)

// SequenceBatchesDecoder is an autogenerated mock type for the SequenceBatchesDecoder type
type SequenceBatchesDecoder struct {
	mock.Mock
}

type SequenceBatchesDecoder_Expecter struct {
	mock *mock.Mock
}

func (_m *SequenceBatchesDecoder) EXPECT() *SequenceBatchesDecoder_Expecter {
	return &SequenceBatchesDecoder_Expecter{mock: &_m.Mock}
}

// DecodeSequenceBatches provides a mock function with given fields: txData, lastBatchNumber, sequencer, txHash, nonce, l1InfoRoot
func (_m *SequenceBatchesDecoder) DecodeSequenceBatches(txData []byte, lastBatchNumber uint64, sequencer common.Address, txHash common.Hash, nonce uint64, l1InfoRoot common.Hash) ([]types.SequencedBatch, error) {
	ret := _m.Called(txData, lastBatchNumber, sequencer, txHash, nonce, l1InfoRoot)

	if len(ret) == 0 {
		panic("no return value specified for DecodeSequenceBatches")
	}

	var r0 []types.SequencedBatch
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, uint64, common.Address, common.Hash, uint64, common.Hash) ([]types.SequencedBatch, error)); ok {
		return rf(txData, lastBatchNumber, sequencer, txHash, nonce, l1InfoRoot)
	}
	if rf, ok := ret.Get(0).(func([]byte, uint64, common.Address, common.Hash, uint64, common.Hash) []types.SequencedBatch); ok {
		r0 = rf(txData, lastBatchNumber, sequencer, txHash, nonce, l1InfoRoot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.SequencedBatch)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, uint64, common.Address, common.Hash, uint64, common.Hash) error); ok {
		r1 = rf(txData, lastBatchNumber, sequencer, txHash, nonce, l1InfoRoot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SequenceBatchesDecoder_DecodeSequenceBatches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecodeSequenceBatches'
type SequenceBatchesDecoder_DecodeSequenceBatches_Call struct {
	*mock.Call
}

// DecodeSequenceBatches is a helper method to define mock.On call
//   - txData []byte
//   - lastBatchNumber uint64
//   - sequencer common.Address
//   - txHash common.Hash
//   - nonce uint64
//   - l1InfoRoot common.Hash
func (_e *SequenceBatchesDecoder_Expecter) DecodeSequenceBatches(txData interface{}, lastBatchNumber interface{}, sequencer interface{}, txHash interface{}, nonce interface{}, l1InfoRoot interface{}) *SequenceBatchesDecoder_DecodeSequenceBatches_Call {
	return &SequenceBatchesDecoder_DecodeSequenceBatches_Call{Call: _e.mock.On("DecodeSequenceBatches", txData, lastBatchNumber, sequencer, txHash, nonce, l1InfoRoot)}
}

func (_c *SequenceBatchesDecoder_DecodeSequenceBatches_Call) Run(run func(txData []byte, lastBatchNumber uint64, sequencer common.Address, txHash common.Hash, nonce uint64, l1InfoRoot common.Hash)) *SequenceBatchesDecoder_DecodeSequenceBatches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(uint64), args[2].(common.Address), args[3].(common.Hash), args[4].(uint64), args[5].(common.Hash))
	})
	return _c
}

func (_c *SequenceBatchesDecoder_DecodeSequenceBatches_Call) Return(_a0 []types.SequencedBatch, _a1 error) *SequenceBatchesDecoder_DecodeSequenceBatches_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SequenceBatchesDecoder_DecodeSequenceBatches_Call) RunAndReturn(run func([]byte, uint64, common.Address, common.Hash, uint64, common.Hash) ([]types.SequencedBatch, error)) *SequenceBatchesDecoder_DecodeSequenceBatches_Call {
	_c.Call.Return(run)
	return _c
}

// MatchMethodId provides a mock function with given fields: methodId
func (_m *SequenceBatchesDecoder) MatchMethodId(methodId []byte) bool {
	ret := _m.Called(methodId)

	if len(ret) == 0 {
		panic("no return value specified for MatchMethodId")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte) bool); ok {
		r0 = rf(methodId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SequenceBatchesDecoder_MatchMethodId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MatchMethodId'
type SequenceBatchesDecoder_MatchMethodId_Call struct {
	*mock.Call
}

// MatchMethodId is a helper method to define mock.On call
//   - methodId []byte
func (_e *SequenceBatchesDecoder_Expecter) MatchMethodId(methodId interface{}) *SequenceBatchesDecoder_MatchMethodId_Call {
	return &SequenceBatchesDecoder_MatchMethodId_Call{Call: _e.mock.On("MatchMethodId", methodId)}
}

func (_c *SequenceBatchesDecoder_MatchMethodId_Call) Run(run func(methodId []byte)) *SequenceBatchesDecoder_MatchMethodId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *SequenceBatchesDecoder_MatchMethodId_Call) Return(_a0 bool) *SequenceBatchesDecoder_MatchMethodId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SequenceBatchesDecoder_MatchMethodId_Call) RunAndReturn(run func([]byte) bool) *SequenceBatchesDecoder_MatchMethodId_Call {
	_c.Call.Return(run)
	return _c
}

// NameMethodID provides a mock function with given fields: methodId
func (_m *SequenceBatchesDecoder) NameMethodID(methodId []byte) string {
	ret := _m.Called(methodId)

	if len(ret) == 0 {
		panic("no return value specified for NameMethodID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func([]byte) string); ok {
		r0 = rf(methodId)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SequenceBatchesDecoder_NameMethodID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NameMethodID'
type SequenceBatchesDecoder_NameMethodID_Call struct {
	*mock.Call
}

// NameMethodID is a helper method to define mock.On call
//   - methodId []byte
func (_e *SequenceBatchesDecoder_Expecter) NameMethodID(methodId interface{}) *SequenceBatchesDecoder_NameMethodID_Call {
	return &SequenceBatchesDecoder_NameMethodID_Call{Call: _e.mock.On("NameMethodID", methodId)}
}

func (_c *SequenceBatchesDecoder_NameMethodID_Call) Run(run func(methodId []byte)) *SequenceBatchesDecoder_NameMethodID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *SequenceBatchesDecoder_NameMethodID_Call) Return(_a0 string) *SequenceBatchesDecoder_NameMethodID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SequenceBatchesDecoder_NameMethodID_Call) RunAndReturn(run func([]byte) string) *SequenceBatchesDecoder_NameMethodID_Call {
	_c.Call.Return(run)
	return _c
}

// NewSequenceBatchesDecoder creates a new instance of SequenceBatchesDecoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSequenceBatchesDecoder(t interface {
	mock.TestingT
	Cleanup(func())
}) *SequenceBatchesDecoder {
	mock := &SequenceBatchesDecoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
