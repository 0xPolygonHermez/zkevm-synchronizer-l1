// Code generated by mockery. DO NOT EDIT.

package mock_synchronizer

import mock "github.com/stretchr/testify/mock"

// SynchronizerReorgSupporter is an autogenerated mock type for the SynchronizerReorgSupporter type
type SynchronizerReorgSupporter struct {
	mock.Mock
}

type SynchronizerReorgSupporter_Expecter struct {
	mock *mock.Mock
}

func (_m *SynchronizerReorgSupporter) EXPECT() *SynchronizerReorgSupporter_Expecter {
	return &SynchronizerReorgSupporter_Expecter{mock: &_m.Mock}
}

// SetCallbackOnReorgDone provides a mock function with given fields: callback
func (_m *SynchronizerReorgSupporter) SetCallbackOnReorgDone(callback func(uint64)) {
	_m.Called(callback)
}

// SynchronizerReorgSupporter_SetCallbackOnReorgDone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCallbackOnReorgDone'
type SynchronizerReorgSupporter_SetCallbackOnReorgDone_Call struct {
	*mock.Call
}

// SetCallbackOnReorgDone is a helper method to define mock.On call
//   - callback func(uint64)
func (_e *SynchronizerReorgSupporter_Expecter) SetCallbackOnReorgDone(callback interface{}) *SynchronizerReorgSupporter_SetCallbackOnReorgDone_Call {
	return &SynchronizerReorgSupporter_SetCallbackOnReorgDone_Call{Call: _e.mock.On("SetCallbackOnReorgDone", callback)}
}

func (_c *SynchronizerReorgSupporter_SetCallbackOnReorgDone_Call) Run(run func(callback func(uint64))) *SynchronizerReorgSupporter_SetCallbackOnReorgDone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(uint64)))
	})
	return _c
}

func (_c *SynchronizerReorgSupporter_SetCallbackOnReorgDone_Call) Return() *SynchronizerReorgSupporter_SetCallbackOnReorgDone_Call {
	_c.Call.Return()
	return _c
}

func (_c *SynchronizerReorgSupporter_SetCallbackOnReorgDone_Call) RunAndReturn(run func(func(uint64))) *SynchronizerReorgSupporter_SetCallbackOnReorgDone_Call {
	_c.Call.Return(run)
	return _c
}

// NewSynchronizerReorgSupporter creates a new instance of SynchronizerReorgSupporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSynchronizerReorgSupporter(t interface {
	mock.TestingT
	Cleanup(func())
}) *SynchronizerReorgSupporter {
	mock := &SynchronizerReorgSupporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
