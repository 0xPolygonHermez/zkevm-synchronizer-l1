// Code generated by mockery. DO NOT EDIT.

package mock_synchronizer

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	synchronizer "github.com/0xPolygonHermez/zkevm-synchronizer-l1/synchronizer"
)

// SynchronizerL1InfoTreeQuerier is an autogenerated mock type for the SynchronizerL1InfoTreeQuerier type
type SynchronizerL1InfoTreeQuerier struct {
	mock.Mock
}

type SynchronizerL1InfoTreeQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *SynchronizerL1InfoTreeQuerier) EXPECT() *SynchronizerL1InfoTreeQuerier_Expecter {
	return &SynchronizerL1InfoTreeQuerier_Expecter{mock: &_m.Mock}
}

// GetL1InfoRootPerIndex provides a mock function with given fields: ctx, L1InfoTreeIndex
func (_m *SynchronizerL1InfoTreeQuerier) GetL1InfoRootPerIndex(ctx context.Context, L1InfoTreeIndex uint32) (common.Hash, error) {
	ret := _m.Called(ctx, L1InfoTreeIndex)

	if len(ret) == 0 {
		panic("no return value specified for GetL1InfoRootPerIndex")
	}

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) (common.Hash, error)); ok {
		return rf(ctx, L1InfoTreeIndex)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) common.Hash); ok {
		r0 = rf(ctx, L1InfoTreeIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, L1InfoTreeIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SynchronizerL1InfoTreeQuerier_GetL1InfoRootPerIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetL1InfoRootPerIndex'
type SynchronizerL1InfoTreeQuerier_GetL1InfoRootPerIndex_Call struct {
	*mock.Call
}

// GetL1InfoRootPerIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - L1InfoTreeIndex uint32
func (_e *SynchronizerL1InfoTreeQuerier_Expecter) GetL1InfoRootPerIndex(ctx interface{}, L1InfoTreeIndex interface{}) *SynchronizerL1InfoTreeQuerier_GetL1InfoRootPerIndex_Call {
	return &SynchronizerL1InfoTreeQuerier_GetL1InfoRootPerIndex_Call{Call: _e.mock.On("GetL1InfoRootPerIndex", ctx, L1InfoTreeIndex)}
}

func (_c *SynchronizerL1InfoTreeQuerier_GetL1InfoRootPerIndex_Call) Run(run func(ctx context.Context, L1InfoTreeIndex uint32)) *SynchronizerL1InfoTreeQuerier_GetL1InfoRootPerIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32))
	})
	return _c
}

func (_c *SynchronizerL1InfoTreeQuerier_GetL1InfoRootPerIndex_Call) Return(_a0 common.Hash, _a1 error) *SynchronizerL1InfoTreeQuerier_GetL1InfoRootPerIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SynchronizerL1InfoTreeQuerier_GetL1InfoRootPerIndex_Call) RunAndReturn(run func(context.Context, uint32) (common.Hash, error)) *SynchronizerL1InfoTreeQuerier_GetL1InfoRootPerIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetL1InfoTreeLeaves provides a mock function with given fields: ctx, indexLeaves
func (_m *SynchronizerL1InfoTreeQuerier) GetL1InfoTreeLeaves(ctx context.Context, indexLeaves []uint32) (map[uint32]synchronizer.L1InfoTreeLeaf, error) {
	ret := _m.Called(ctx, indexLeaves)

	if len(ret) == 0 {
		panic("no return value specified for GetL1InfoTreeLeaves")
	}

	var r0 map[uint32]synchronizer.L1InfoTreeLeaf
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uint32) (map[uint32]synchronizer.L1InfoTreeLeaf, error)); ok {
		return rf(ctx, indexLeaves)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uint32) map[uint32]synchronizer.L1InfoTreeLeaf); ok {
		r0 = rf(ctx, indexLeaves)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uint32]synchronizer.L1InfoTreeLeaf)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uint32) error); ok {
		r1 = rf(ctx, indexLeaves)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SynchronizerL1InfoTreeQuerier_GetL1InfoTreeLeaves_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetL1InfoTreeLeaves'
type SynchronizerL1InfoTreeQuerier_GetL1InfoTreeLeaves_Call struct {
	*mock.Call
}

// GetL1InfoTreeLeaves is a helper method to define mock.On call
//   - ctx context.Context
//   - indexLeaves []uint32
func (_e *SynchronizerL1InfoTreeQuerier_Expecter) GetL1InfoTreeLeaves(ctx interface{}, indexLeaves interface{}) *SynchronizerL1InfoTreeQuerier_GetL1InfoTreeLeaves_Call {
	return &SynchronizerL1InfoTreeQuerier_GetL1InfoTreeLeaves_Call{Call: _e.mock.On("GetL1InfoTreeLeaves", ctx, indexLeaves)}
}

func (_c *SynchronizerL1InfoTreeQuerier_GetL1InfoTreeLeaves_Call) Run(run func(ctx context.Context, indexLeaves []uint32)) *SynchronizerL1InfoTreeQuerier_GetL1InfoTreeLeaves_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uint32))
	})
	return _c
}

func (_c *SynchronizerL1InfoTreeQuerier_GetL1InfoTreeLeaves_Call) Return(_a0 map[uint32]synchronizer.L1InfoTreeLeaf, _a1 error) *SynchronizerL1InfoTreeQuerier_GetL1InfoTreeLeaves_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SynchronizerL1InfoTreeQuerier_GetL1InfoTreeLeaves_Call) RunAndReturn(run func(context.Context, []uint32) (map[uint32]synchronizer.L1InfoTreeLeaf, error)) *SynchronizerL1InfoTreeQuerier_GetL1InfoTreeLeaves_Call {
	_c.Call.Return(run)
	return _c
}

// GetLeafsByL1InfoRoot provides a mock function with given fields: ctx, l1InfoRoot
func (_m *SynchronizerL1InfoTreeQuerier) GetLeafsByL1InfoRoot(ctx context.Context, l1InfoRoot common.Hash) ([]synchronizer.L1InfoTreeLeaf, error) {
	ret := _m.Called(ctx, l1InfoRoot)

	if len(ret) == 0 {
		panic("no return value specified for GetLeafsByL1InfoRoot")
	}

	var r0 []synchronizer.L1InfoTreeLeaf
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) ([]synchronizer.L1InfoTreeLeaf, error)); ok {
		return rf(ctx, l1InfoRoot)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) []synchronizer.L1InfoTreeLeaf); ok {
		r0 = rf(ctx, l1InfoRoot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]synchronizer.L1InfoTreeLeaf)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Hash) error); ok {
		r1 = rf(ctx, l1InfoRoot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SynchronizerL1InfoTreeQuerier_GetLeafsByL1InfoRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLeafsByL1InfoRoot'
type SynchronizerL1InfoTreeQuerier_GetLeafsByL1InfoRoot_Call struct {
	*mock.Call
}

// GetLeafsByL1InfoRoot is a helper method to define mock.On call
//   - ctx context.Context
//   - l1InfoRoot common.Hash
func (_e *SynchronizerL1InfoTreeQuerier_Expecter) GetLeafsByL1InfoRoot(ctx interface{}, l1InfoRoot interface{}) *SynchronizerL1InfoTreeQuerier_GetLeafsByL1InfoRoot_Call {
	return &SynchronizerL1InfoTreeQuerier_GetLeafsByL1InfoRoot_Call{Call: _e.mock.On("GetLeafsByL1InfoRoot", ctx, l1InfoRoot)}
}

func (_c *SynchronizerL1InfoTreeQuerier_GetLeafsByL1InfoRoot_Call) Run(run func(ctx context.Context, l1InfoRoot common.Hash)) *SynchronizerL1InfoTreeQuerier_GetLeafsByL1InfoRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash))
	})
	return _c
}

func (_c *SynchronizerL1InfoTreeQuerier_GetLeafsByL1InfoRoot_Call) Return(_a0 []synchronizer.L1InfoTreeLeaf, _a1 error) *SynchronizerL1InfoTreeQuerier_GetLeafsByL1InfoRoot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SynchronizerL1InfoTreeQuerier_GetLeafsByL1InfoRoot_Call) RunAndReturn(run func(context.Context, common.Hash) ([]synchronizer.L1InfoTreeLeaf, error)) *SynchronizerL1InfoTreeQuerier_GetLeafsByL1InfoRoot_Call {
	_c.Call.Return(run)
	return _c
}

// NewSynchronizerL1InfoTreeQuerier creates a new instance of SynchronizerL1InfoTreeQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSynchronizerL1InfoTreeQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *SynchronizerL1InfoTreeQuerier {
	mock := &SynchronizerL1InfoTreeQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
