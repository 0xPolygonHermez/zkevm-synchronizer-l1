// Code generated by mockery. DO NOT EDIT.

package mock_synchronizer

import (
	context "context"

	pgstorage "github.com/0xPolygonHermez/zkevm-synchronizer-l1/db/pgstorage"
	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v4"
)

// StorageSequenceBatchesInterface is an autogenerated mock type for the StorageSequenceBatchesInterface type
type StorageSequenceBatchesInterface struct {
	mock.Mock
}

type StorageSequenceBatchesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *StorageSequenceBatchesInterface) EXPECT() *StorageSequenceBatchesInterface_Expecter {
	return &StorageSequenceBatchesInterface_Expecter{mock: &_m.Mock}
}

// AddSequencedBatches provides a mock function with given fields: ctx, sequence, dbTx
func (_m *StorageSequenceBatchesInterface) AddSequencedBatches(ctx context.Context, sequence pgstorage.SequencedBatches, dbTx pgx.Tx) error {
	ret := _m.Called(ctx, sequence, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for AddSequencedBatches")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pgstorage.SequencedBatches, pgx.Tx) error); ok {
		r0 = rf(ctx, sequence, dbTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StorageSequenceBatchesInterface_AddSequencedBatches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSequencedBatches'
type StorageSequenceBatchesInterface_AddSequencedBatches_Call struct {
	*mock.Call
}

// AddSequencedBatches is a helper method to define mock.On call
//   - ctx context.Context
//   - sequence pgstorage.SequencedBatches
//   - dbTx pgx.Tx
func (_e *StorageSequenceBatchesInterface_Expecter) AddSequencedBatches(ctx interface{}, sequence interface{}, dbTx interface{}) *StorageSequenceBatchesInterface_AddSequencedBatches_Call {
	return &StorageSequenceBatchesInterface_AddSequencedBatches_Call{Call: _e.mock.On("AddSequencedBatches", ctx, sequence, dbTx)}
}

func (_c *StorageSequenceBatchesInterface_AddSequencedBatches_Call) Run(run func(ctx context.Context, sequence pgstorage.SequencedBatches, dbTx pgx.Tx)) *StorageSequenceBatchesInterface_AddSequencedBatches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgstorage.SequencedBatches), args[2].(pgx.Tx))
	})
	return _c
}

func (_c *StorageSequenceBatchesInterface_AddSequencedBatches_Call) Return(_a0 error) *StorageSequenceBatchesInterface_AddSequencedBatches_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StorageSequenceBatchesInterface_AddSequencedBatches_Call) RunAndReturn(run func(context.Context, pgstorage.SequencedBatches, pgx.Tx) error) *StorageSequenceBatchesInterface_AddSequencedBatches_Call {
	_c.Call.Return(run)
	return _c
}

// GetSequenceByBatchNumber provides a mock function with given fields: ctx, batchNumber, dbTx
func (_m *StorageSequenceBatchesInterface) GetSequenceByBatchNumber(ctx context.Context, batchNumber uint64, dbTx pgx.Tx) (*pgstorage.SequencedBatches, error) {
	ret := _m.Called(ctx, batchNumber, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for GetSequenceByBatchNumber")
	}

	var r0 *pgstorage.SequencedBatches
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, pgx.Tx) (*pgstorage.SequencedBatches, error)); ok {
		return rf(ctx, batchNumber, dbTx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, pgx.Tx) *pgstorage.SequencedBatches); ok {
		r0 = rf(ctx, batchNumber, dbTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgstorage.SequencedBatches)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, pgx.Tx) error); ok {
		r1 = rf(ctx, batchNumber, dbTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorageSequenceBatchesInterface_GetSequenceByBatchNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSequenceByBatchNumber'
type StorageSequenceBatchesInterface_GetSequenceByBatchNumber_Call struct {
	*mock.Call
}

// GetSequenceByBatchNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - batchNumber uint64
//   - dbTx pgx.Tx
func (_e *StorageSequenceBatchesInterface_Expecter) GetSequenceByBatchNumber(ctx interface{}, batchNumber interface{}, dbTx interface{}) *StorageSequenceBatchesInterface_GetSequenceByBatchNumber_Call {
	return &StorageSequenceBatchesInterface_GetSequenceByBatchNumber_Call{Call: _e.mock.On("GetSequenceByBatchNumber", ctx, batchNumber, dbTx)}
}

func (_c *StorageSequenceBatchesInterface_GetSequenceByBatchNumber_Call) Run(run func(ctx context.Context, batchNumber uint64, dbTx pgx.Tx)) *StorageSequenceBatchesInterface_GetSequenceByBatchNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(pgx.Tx))
	})
	return _c
}

func (_c *StorageSequenceBatchesInterface_GetSequenceByBatchNumber_Call) Return(_a0 *pgstorage.SequencedBatches, _a1 error) *StorageSequenceBatchesInterface_GetSequenceByBatchNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StorageSequenceBatchesInterface_GetSequenceByBatchNumber_Call) RunAndReturn(run func(context.Context, uint64, pgx.Tx) (*pgstorage.SequencedBatches, error)) *StorageSequenceBatchesInterface_GetSequenceByBatchNumber_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorageSequenceBatchesInterface creates a new instance of StorageSequenceBatchesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorageSequenceBatchesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageSequenceBatchesInterface {
	mock := &StorageSequenceBatchesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
