// Code generated by mockery. DO NOT EDIT.

package mock_synchronizer

import (
	context "context"

	entities "github.com/0xPolygonHermez/zkevm-synchronizer-l1/state/entities"
	mock "github.com/stretchr/testify/mock"

	model "github.com/0xPolygonHermez/zkevm-synchronizer-l1/state/model"
)

// stateReorgManager is an autogenerated mock type for the stateReorgManager type
type stateReorgManager struct {
	mock.Mock
}

type stateReorgManager_Expecter struct {
	mock *mock.Mock
}

func (_m *stateReorgManager) EXPECT() *stateReorgManager_Expecter {
	return &stateReorgManager_Expecter{mock: &_m.Mock}
}

// AddOnReorgCallback provides a mock function with given fields: f
func (_m *stateReorgManager) AddOnReorgCallback(f func(model.ReorgExecutionResult)) {
	_m.Called(f)
}

// stateReorgManager_AddOnReorgCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOnReorgCallback'
type stateReorgManager_AddOnReorgCallback_Call struct {
	*mock.Call
}

// AddOnReorgCallback is a helper method to define mock.On call
//   - f func(model.ReorgExecutionResult)
func (_e *stateReorgManager_Expecter) AddOnReorgCallback(f interface{}) *stateReorgManager_AddOnReorgCallback_Call {
	return &stateReorgManager_AddOnReorgCallback_Call{Call: _e.mock.On("AddOnReorgCallback", f)}
}

func (_c *stateReorgManager_AddOnReorgCallback_Call) Run(run func(f func(model.ReorgExecutionResult))) *stateReorgManager_AddOnReorgCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(model.ReorgExecutionResult)))
	})
	return _c
}

func (_c *stateReorgManager_AddOnReorgCallback_Call) Return() *stateReorgManager_AddOnReorgCallback_Call {
	_c.Call.Return()
	return _c
}

func (_c *stateReorgManager_AddOnReorgCallback_Call) RunAndReturn(run func(func(model.ReorgExecutionResult))) *stateReorgManager_AddOnReorgCallback_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteReorg provides a mock function with given fields: ctx, reorgRequest, dbTx
func (_m *stateReorgManager) ExecuteReorg(ctx context.Context, reorgRequest model.ReorgRequest, dbTx entities.Tx) model.ReorgExecutionResult {
	ret := _m.Called(ctx, reorgRequest, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteReorg")
	}

	var r0 model.ReorgExecutionResult
	if rf, ok := ret.Get(0).(func(context.Context, model.ReorgRequest, entities.Tx) model.ReorgExecutionResult); ok {
		r0 = rf(ctx, reorgRequest, dbTx)
	} else {
		r0 = ret.Get(0).(model.ReorgExecutionResult)
	}

	return r0
}

// stateReorgManager_ExecuteReorg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteReorg'
type stateReorgManager_ExecuteReorg_Call struct {
	*mock.Call
}

// ExecuteReorg is a helper method to define mock.On call
//   - ctx context.Context
//   - reorgRequest model.ReorgRequest
//   - dbTx entities.Tx
func (_e *stateReorgManager_Expecter) ExecuteReorg(ctx interface{}, reorgRequest interface{}, dbTx interface{}) *stateReorgManager_ExecuteReorg_Call {
	return &stateReorgManager_ExecuteReorg_Call{Call: _e.mock.On("ExecuteReorg", ctx, reorgRequest, dbTx)}
}

func (_c *stateReorgManager_ExecuteReorg_Call) Run(run func(ctx context.Context, reorgRequest model.ReorgRequest, dbTx entities.Tx)) *stateReorgManager_ExecuteReorg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.ReorgRequest), args[2].(entities.Tx))
	})
	return _c
}

func (_c *stateReorgManager_ExecuteReorg_Call) Return(_a0 model.ReorgExecutionResult) *stateReorgManager_ExecuteReorg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *stateReorgManager_ExecuteReorg_Call) RunAndReturn(run func(context.Context, model.ReorgRequest, entities.Tx) model.ReorgExecutionResult) *stateReorgManager_ExecuteReorg_Call {
	_c.Call.Return(run)
	return _c
}

// newStateReorgManager creates a new instance of stateReorgManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newStateReorgManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *stateReorgManager {
	mock := &stateReorgManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
