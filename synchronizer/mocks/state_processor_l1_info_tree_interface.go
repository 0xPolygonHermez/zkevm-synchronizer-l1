// Code generated by mockery. DO NOT EDIT.

package mock_synchronizer

import (
	context "context"

	entities "github.com/0xPolygonHermez/zkevm-synchronizer-l1/state/entities"

	mock "github.com/stretchr/testify/mock"
)

// stateProcessorL1InfoTreeInterface is an autogenerated mock type for the stateProcessorL1InfoTreeInterface type
type stateProcessorL1InfoTreeInterface struct {
	mock.Mock
}

type stateProcessorL1InfoTreeInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *stateProcessorL1InfoTreeInterface) EXPECT() *stateProcessorL1InfoTreeInterface_Expecter {
	return &stateProcessorL1InfoTreeInterface_Expecter{mock: &_m.Mock}
}

// AddL1InfoTreeLeafAndAssignIndex provides a mock function with given fields: ctx, exitRoot, dbTx
func (_m *stateProcessorL1InfoTreeInterface) AddL1InfoTreeLeafAndAssignIndex(ctx context.Context, exitRoot *entities.L1InfoTreeLeaf, dbTx entities.Tx) (*entities.L1InfoTreeLeaf, error) {
	ret := _m.Called(ctx, exitRoot, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for AddL1InfoTreeLeafAndAssignIndex")
	}

	var r0 *entities.L1InfoTreeLeaf
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.L1InfoTreeLeaf, entities.Tx) (*entities.L1InfoTreeLeaf, error)); ok {
		return rf(ctx, exitRoot, dbTx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.L1InfoTreeLeaf, entities.Tx) *entities.L1InfoTreeLeaf); ok {
		r0 = rf(ctx, exitRoot, dbTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.L1InfoTreeLeaf)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.L1InfoTreeLeaf, entities.Tx) error); ok {
		r1 = rf(ctx, exitRoot, dbTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// stateProcessorL1InfoTreeInterface_AddL1InfoTreeLeafAndAssignIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddL1InfoTreeLeafAndAssignIndex'
type stateProcessorL1InfoTreeInterface_AddL1InfoTreeLeafAndAssignIndex_Call struct {
	*mock.Call
}

// AddL1InfoTreeLeafAndAssignIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - exitRoot *entities.L1InfoTreeLeaf
//   - dbTx entities.Tx
func (_e *stateProcessorL1InfoTreeInterface_Expecter) AddL1InfoTreeLeafAndAssignIndex(ctx interface{}, exitRoot interface{}, dbTx interface{}) *stateProcessorL1InfoTreeInterface_AddL1InfoTreeLeafAndAssignIndex_Call {
	return &stateProcessorL1InfoTreeInterface_AddL1InfoTreeLeafAndAssignIndex_Call{Call: _e.mock.On("AddL1InfoTreeLeafAndAssignIndex", ctx, exitRoot, dbTx)}
}

func (_c *stateProcessorL1InfoTreeInterface_AddL1InfoTreeLeafAndAssignIndex_Call) Run(run func(ctx context.Context, exitRoot *entities.L1InfoTreeLeaf, dbTx entities.Tx)) *stateProcessorL1InfoTreeInterface_AddL1InfoTreeLeafAndAssignIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.L1InfoTreeLeaf), args[2].(entities.Tx))
	})
	return _c
}

func (_c *stateProcessorL1InfoTreeInterface_AddL1InfoTreeLeafAndAssignIndex_Call) Return(_a0 *entities.L1InfoTreeLeaf, _a1 error) *stateProcessorL1InfoTreeInterface_AddL1InfoTreeLeafAndAssignIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *stateProcessorL1InfoTreeInterface_AddL1InfoTreeLeafAndAssignIndex_Call) RunAndReturn(run func(context.Context, *entities.L1InfoTreeLeaf, entities.Tx) (*entities.L1InfoTreeLeaf, error)) *stateProcessorL1InfoTreeInterface_AddL1InfoTreeLeafAndAssignIndex_Call {
	_c.Call.Return(run)
	return _c
}

// newStateProcessorL1InfoTreeInterface creates a new instance of stateProcessorL1InfoTreeInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newStateProcessorL1InfoTreeInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *stateProcessorL1InfoTreeInterface {
	mock := &stateProcessorL1InfoTreeInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
