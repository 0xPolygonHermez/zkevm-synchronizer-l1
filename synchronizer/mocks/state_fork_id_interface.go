// Code generated by mockery. DO NOT EDIT.

package mock_synchronizer

import (
	context "context"

	entities "github.com/0xPolygonHermez/zkevm-synchronizer-l1/state/entities"

	mock "github.com/stretchr/testify/mock"
)

// stateForkIdInterface is an autogenerated mock type for the stateForkIdInterface type
type stateForkIdInterface struct {
	mock.Mock
}

type stateForkIdInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *stateForkIdInterface) EXPECT() *stateForkIdInterface_Expecter {
	return &stateForkIdInterface_Expecter{mock: &_m.Mock}
}

// AddForkID provides a mock function with given fields: ctx, newForkID, dbTx
func (_m *stateForkIdInterface) AddForkID(ctx context.Context, newForkID entities.ForkIDInterval, dbTx entities.Tx) error {
	ret := _m.Called(ctx, newForkID, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for AddForkID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ForkIDInterval, entities.Tx) error); ok {
		r0 = rf(ctx, newForkID, dbTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// stateForkIdInterface_AddForkID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddForkID'
type stateForkIdInterface_AddForkID_Call struct {
	*mock.Call
}

// AddForkID is a helper method to define mock.On call
//   - ctx context.Context
//   - newForkID entities.ForkIDInterval
//   - dbTx entities.Tx
func (_e *stateForkIdInterface_Expecter) AddForkID(ctx interface{}, newForkID interface{}, dbTx interface{}) *stateForkIdInterface_AddForkID_Call {
	return &stateForkIdInterface_AddForkID_Call{Call: _e.mock.On("AddForkID", ctx, newForkID, dbTx)}
}

func (_c *stateForkIdInterface_AddForkID_Call) Run(run func(ctx context.Context, newForkID entities.ForkIDInterval, dbTx entities.Tx)) *stateForkIdInterface_AddForkID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.ForkIDInterval), args[2].(entities.Tx))
	})
	return _c
}

func (_c *stateForkIdInterface_AddForkID_Call) Return(_a0 error) *stateForkIdInterface_AddForkID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *stateForkIdInterface_AddForkID_Call) RunAndReturn(run func(context.Context, entities.ForkIDInterval, entities.Tx) error) *stateForkIdInterface_AddForkID_Call {
	_c.Call.Return(run)
	return _c
}

// newStateForkIdInterface creates a new instance of stateForkIdInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newStateForkIdInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *stateForkIdInterface {
	mock := &stateForkIdInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
