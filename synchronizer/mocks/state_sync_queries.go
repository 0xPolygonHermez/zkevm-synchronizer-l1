// Code generated by mockery. DO NOT EDIT.

package mock_synchronizer

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	entities "github.com/0xPolygonHermez/zkevm-synchronizer-l1/state/entities"

	mock "github.com/stretchr/testify/mock"
)

// stateSyncQueries is an autogenerated mock type for the stateSyncQueries type
type stateSyncQueries struct {
	mock.Mock
}

type stateSyncQueries_Expecter struct {
	mock *mock.Mock
}

func (_m *stateSyncQueries) EXPECT() *stateSyncQueries_Expecter {
	return &stateSyncQueries_Expecter{mock: &_m.Mock}
}

// GetL1InfoLeafPerIndex provides a mock function with given fields: ctx, L1InfoTreeIndex, dbTx
func (_m *stateSyncQueries) GetL1InfoLeafPerIndex(ctx context.Context, L1InfoTreeIndex uint32, dbTx entities.Tx) (*entities.L1InfoTreeLeaf, error) {
	ret := _m.Called(ctx, L1InfoTreeIndex, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for GetL1InfoLeafPerIndex")
	}

	var r0 *entities.L1InfoTreeLeaf
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, entities.Tx) (*entities.L1InfoTreeLeaf, error)); ok {
		return rf(ctx, L1InfoTreeIndex, dbTx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, entities.Tx) *entities.L1InfoTreeLeaf); ok {
		r0 = rf(ctx, L1InfoTreeIndex, dbTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.L1InfoTreeLeaf)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, entities.Tx) error); ok {
		r1 = rf(ctx, L1InfoTreeIndex, dbTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// stateSyncQueries_GetL1InfoLeafPerIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetL1InfoLeafPerIndex'
type stateSyncQueries_GetL1InfoLeafPerIndex_Call struct {
	*mock.Call
}

// GetL1InfoLeafPerIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - L1InfoTreeIndex uint32
//   - dbTx entities.Tx
func (_e *stateSyncQueries_Expecter) GetL1InfoLeafPerIndex(ctx interface{}, L1InfoTreeIndex interface{}, dbTx interface{}) *stateSyncQueries_GetL1InfoLeafPerIndex_Call {
	return &stateSyncQueries_GetL1InfoLeafPerIndex_Call{Call: _e.mock.On("GetL1InfoLeafPerIndex", ctx, L1InfoTreeIndex, dbTx)}
}

func (_c *stateSyncQueries_GetL1InfoLeafPerIndex_Call) Run(run func(ctx context.Context, L1InfoTreeIndex uint32, dbTx entities.Tx)) *stateSyncQueries_GetL1InfoLeafPerIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32), args[2].(entities.Tx))
	})
	return _c
}

func (_c *stateSyncQueries_GetL1InfoLeafPerIndex_Call) Return(_a0 *entities.L1InfoTreeLeaf, _a1 error) *stateSyncQueries_GetL1InfoLeafPerIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *stateSyncQueries_GetL1InfoLeafPerIndex_Call) RunAndReturn(run func(context.Context, uint32, entities.Tx) (*entities.L1InfoTreeLeaf, error)) *stateSyncQueries_GetL1InfoLeafPerIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetL1InfoRootPerLeafIndex provides a mock function with given fields: ctx, L1InfoTreeIndex, dbTx
func (_m *stateSyncQueries) GetL1InfoRootPerLeafIndex(ctx context.Context, L1InfoTreeIndex uint32, dbTx entities.Tx) (common.Hash, error) {
	ret := _m.Called(ctx, L1InfoTreeIndex, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for GetL1InfoRootPerLeafIndex")
	}

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, entities.Tx) (common.Hash, error)); ok {
		return rf(ctx, L1InfoTreeIndex, dbTx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, entities.Tx) common.Hash); ok {
		r0 = rf(ctx, L1InfoTreeIndex, dbTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, entities.Tx) error); ok {
		r1 = rf(ctx, L1InfoTreeIndex, dbTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// stateSyncQueries_GetL1InfoRootPerLeafIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetL1InfoRootPerLeafIndex'
type stateSyncQueries_GetL1InfoRootPerLeafIndex_Call struct {
	*mock.Call
}

// GetL1InfoRootPerLeafIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - L1InfoTreeIndex uint32
//   - dbTx entities.Tx
func (_e *stateSyncQueries_Expecter) GetL1InfoRootPerLeafIndex(ctx interface{}, L1InfoTreeIndex interface{}, dbTx interface{}) *stateSyncQueries_GetL1InfoRootPerLeafIndex_Call {
	return &stateSyncQueries_GetL1InfoRootPerLeafIndex_Call{Call: _e.mock.On("GetL1InfoRootPerLeafIndex", ctx, L1InfoTreeIndex, dbTx)}
}

func (_c *stateSyncQueries_GetL1InfoRootPerLeafIndex_Call) Run(run func(ctx context.Context, L1InfoTreeIndex uint32, dbTx entities.Tx)) *stateSyncQueries_GetL1InfoRootPerLeafIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32), args[2].(entities.Tx))
	})
	return _c
}

func (_c *stateSyncQueries_GetL1InfoRootPerLeafIndex_Call) Return(_a0 common.Hash, _a1 error) *stateSyncQueries_GetL1InfoRootPerLeafIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *stateSyncQueries_GetL1InfoRootPerLeafIndex_Call) RunAndReturn(run func(context.Context, uint32, entities.Tx) (common.Hash, error)) *stateSyncQueries_GetL1InfoRootPerLeafIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetL1InfoTreeLeaves provides a mock function with given fields: ctx, indexLeaves, dbTx
func (_m *stateSyncQueries) GetL1InfoTreeLeaves(ctx context.Context, indexLeaves []uint32, dbTx entities.Tx) (map[uint32]entities.L1InfoTreeLeaf, error) {
	ret := _m.Called(ctx, indexLeaves, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for GetL1InfoTreeLeaves")
	}

	var r0 map[uint32]entities.L1InfoTreeLeaf
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uint32, entities.Tx) (map[uint32]entities.L1InfoTreeLeaf, error)); ok {
		return rf(ctx, indexLeaves, dbTx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uint32, entities.Tx) map[uint32]entities.L1InfoTreeLeaf); ok {
		r0 = rf(ctx, indexLeaves, dbTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uint32]entities.L1InfoTreeLeaf)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uint32, entities.Tx) error); ok {
		r1 = rf(ctx, indexLeaves, dbTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// stateSyncQueries_GetL1InfoTreeLeaves_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetL1InfoTreeLeaves'
type stateSyncQueries_GetL1InfoTreeLeaves_Call struct {
	*mock.Call
}

// GetL1InfoTreeLeaves is a helper method to define mock.On call
//   - ctx context.Context
//   - indexLeaves []uint32
//   - dbTx entities.Tx
func (_e *stateSyncQueries_Expecter) GetL1InfoTreeLeaves(ctx interface{}, indexLeaves interface{}, dbTx interface{}) *stateSyncQueries_GetL1InfoTreeLeaves_Call {
	return &stateSyncQueries_GetL1InfoTreeLeaves_Call{Call: _e.mock.On("GetL1InfoTreeLeaves", ctx, indexLeaves, dbTx)}
}

func (_c *stateSyncQueries_GetL1InfoTreeLeaves_Call) Run(run func(ctx context.Context, indexLeaves []uint32, dbTx entities.Tx)) *stateSyncQueries_GetL1InfoTreeLeaves_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uint32), args[2].(entities.Tx))
	})
	return _c
}

func (_c *stateSyncQueries_GetL1InfoTreeLeaves_Call) Return(_a0 map[uint32]entities.L1InfoTreeLeaf, _a1 error) *stateSyncQueries_GetL1InfoTreeLeaves_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *stateSyncQueries_GetL1InfoTreeLeaves_Call) RunAndReturn(run func(context.Context, []uint32, entities.Tx) (map[uint32]entities.L1InfoTreeLeaf, error)) *stateSyncQueries_GetL1InfoTreeLeaves_Call {
	_c.Call.Return(run)
	return _c
}

// GetLeafsByL1InfoRoot provides a mock function with given fields: ctx, l1InfoRoot, dbTx
func (_m *stateSyncQueries) GetLeafsByL1InfoRoot(ctx context.Context, l1InfoRoot common.Hash, dbTx entities.Tx) ([]entities.L1InfoTreeLeaf, error) {
	ret := _m.Called(ctx, l1InfoRoot, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for GetLeafsByL1InfoRoot")
	}

	var r0 []entities.L1InfoTreeLeaf
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash, entities.Tx) ([]entities.L1InfoTreeLeaf, error)); ok {
		return rf(ctx, l1InfoRoot, dbTx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash, entities.Tx) []entities.L1InfoTreeLeaf); ok {
		r0 = rf(ctx, l1InfoRoot, dbTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.L1InfoTreeLeaf)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Hash, entities.Tx) error); ok {
		r1 = rf(ctx, l1InfoRoot, dbTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// stateSyncQueries_GetLeafsByL1InfoRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLeafsByL1InfoRoot'
type stateSyncQueries_GetLeafsByL1InfoRoot_Call struct {
	*mock.Call
}

// GetLeafsByL1InfoRoot is a helper method to define mock.On call
//   - ctx context.Context
//   - l1InfoRoot common.Hash
//   - dbTx entities.Tx
func (_e *stateSyncQueries_Expecter) GetLeafsByL1InfoRoot(ctx interface{}, l1InfoRoot interface{}, dbTx interface{}) *stateSyncQueries_GetLeafsByL1InfoRoot_Call {
	return &stateSyncQueries_GetLeafsByL1InfoRoot_Call{Call: _e.mock.On("GetLeafsByL1InfoRoot", ctx, l1InfoRoot, dbTx)}
}

func (_c *stateSyncQueries_GetLeafsByL1InfoRoot_Call) Run(run func(ctx context.Context, l1InfoRoot common.Hash, dbTx entities.Tx)) *stateSyncQueries_GetLeafsByL1InfoRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash), args[2].(entities.Tx))
	})
	return _c
}

func (_c *stateSyncQueries_GetLeafsByL1InfoRoot_Call) Return(_a0 []entities.L1InfoTreeLeaf, _a1 error) *stateSyncQueries_GetLeafsByL1InfoRoot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *stateSyncQueries_GetLeafsByL1InfoRoot_Call) RunAndReturn(run func(context.Context, common.Hash, entities.Tx) ([]entities.L1InfoTreeLeaf, error)) *stateSyncQueries_GetLeafsByL1InfoRoot_Call {
	_c.Call.Return(run)
	return _c
}

// newStateSyncQueries creates a new instance of stateSyncQueries. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newStateSyncQueries(t interface {
	mock.TestingT
	Cleanup(func())
}) *stateSyncQueries {
	mock := &stateSyncQueries{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
