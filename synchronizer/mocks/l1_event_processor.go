// Code generated by mockery. DO NOT EDIT.

package mock_synchronizer

import (
	context "context"

	actions "github.com/0xPolygonHermez/zkevm-synchronizer-l1/synchronizer/actions"

	entities "github.com/0xPolygonHermez/zkevm-synchronizer-l1/state/entities"

	etherman "github.com/0xPolygonHermez/zkevm-synchronizer-l1/etherman"

	mock "github.com/stretchr/testify/mock"
)

// L1EventProcessor is an autogenerated mock type for the L1EventProcessor type
type L1EventProcessor struct {
	mock.Mock
}

type L1EventProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *L1EventProcessor) EXPECT() *L1EventProcessor_Expecter {
	return &L1EventProcessor_Expecter{mock: &_m.Mock}
}

// Name provides a mock function with given fields:
func (_m *L1EventProcessor) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// L1EventProcessor_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type L1EventProcessor_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *L1EventProcessor_Expecter) Name() *L1EventProcessor_Name_Call {
	return &L1EventProcessor_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *L1EventProcessor_Name_Call) Run(run func()) *L1EventProcessor_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *L1EventProcessor_Name_Call) Return(_a0 string) *L1EventProcessor_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *L1EventProcessor_Name_Call) RunAndReturn(run func() string) *L1EventProcessor_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Process provides a mock function with given fields: ctx, forkId, order, l1Block, dbTx
func (_m *L1EventProcessor) Process(ctx context.Context, forkId actions.ForkIdType, order etherman.Order, l1Block *etherman.Block, dbTx entities.Tx) error {
	ret := _m.Called(ctx, forkId, order, l1Block, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, actions.ForkIdType, etherman.Order, *etherman.Block, entities.Tx) error); ok {
		r0 = rf(ctx, forkId, order, l1Block, dbTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// L1EventProcessor_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type L1EventProcessor_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - ctx context.Context
//   - forkId actions.ForkIdType
//   - order etherman.Order
//   - l1Block *etherman.Block
//   - dbTx entities.Tx
func (_e *L1EventProcessor_Expecter) Process(ctx interface{}, forkId interface{}, order interface{}, l1Block interface{}, dbTx interface{}) *L1EventProcessor_Process_Call {
	return &L1EventProcessor_Process_Call{Call: _e.mock.On("Process", ctx, forkId, order, l1Block, dbTx)}
}

func (_c *L1EventProcessor_Process_Call) Run(run func(ctx context.Context, forkId actions.ForkIdType, order etherman.Order, l1Block *etherman.Block, dbTx entities.Tx)) *L1EventProcessor_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(actions.ForkIdType), args[2].(etherman.Order), args[3].(*etherman.Block), args[4].(entities.Tx))
	})
	return _c
}

func (_c *L1EventProcessor_Process_Call) Return(_a0 error) *L1EventProcessor_Process_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *L1EventProcessor_Process_Call) RunAndReturn(run func(context.Context, actions.ForkIdType, etherman.Order, *etherman.Block, entities.Tx) error) *L1EventProcessor_Process_Call {
	_c.Call.Return(run)
	return _c
}

// SupportedEvents provides a mock function with given fields:
func (_m *L1EventProcessor) SupportedEvents() []etherman.EventOrder {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SupportedEvents")
	}

	var r0 []etherman.EventOrder
	if rf, ok := ret.Get(0).(func() []etherman.EventOrder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]etherman.EventOrder)
		}
	}

	return r0
}

// L1EventProcessor_SupportedEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SupportedEvents'
type L1EventProcessor_SupportedEvents_Call struct {
	*mock.Call
}

// SupportedEvents is a helper method to define mock.On call
func (_e *L1EventProcessor_Expecter) SupportedEvents() *L1EventProcessor_SupportedEvents_Call {
	return &L1EventProcessor_SupportedEvents_Call{Call: _e.mock.On("SupportedEvents")}
}

func (_c *L1EventProcessor_SupportedEvents_Call) Run(run func()) *L1EventProcessor_SupportedEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *L1EventProcessor_SupportedEvents_Call) Return(_a0 []etherman.EventOrder) *L1EventProcessor_SupportedEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *L1EventProcessor_SupportedEvents_Call) RunAndReturn(run func() []etherman.EventOrder) *L1EventProcessor_SupportedEvents_Call {
	_c.Call.Return(run)
	return _c
}

// SupportedForkIds provides a mock function with given fields:
func (_m *L1EventProcessor) SupportedForkIds() []actions.ForkIdType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SupportedForkIds")
	}

	var r0 []actions.ForkIdType
	if rf, ok := ret.Get(0).(func() []actions.ForkIdType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]actions.ForkIdType)
		}
	}

	return r0
}

// L1EventProcessor_SupportedForkIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SupportedForkIds'
type L1EventProcessor_SupportedForkIds_Call struct {
	*mock.Call
}

// SupportedForkIds is a helper method to define mock.On call
func (_e *L1EventProcessor_Expecter) SupportedForkIds() *L1EventProcessor_SupportedForkIds_Call {
	return &L1EventProcessor_SupportedForkIds_Call{Call: _e.mock.On("SupportedForkIds")}
}

func (_c *L1EventProcessor_SupportedForkIds_Call) Run(run func()) *L1EventProcessor_SupportedForkIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *L1EventProcessor_SupportedForkIds_Call) Return(_a0 []actions.ForkIdType) *L1EventProcessor_SupportedForkIds_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *L1EventProcessor_SupportedForkIds_Call) RunAndReturn(run func() []actions.ForkIdType) *L1EventProcessor_SupportedForkIds_Call {
	_c.Call.Return(run)
	return _c
}

// NewL1EventProcessor creates a new instance of L1EventProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewL1EventProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *L1EventProcessor {
	mock := &L1EventProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
