// Code generated by mockery. DO NOT EDIT.

package mock_synchronizer

import mock "github.com/stretchr/testify/mock"

// SynchronizerFullInterface is an autogenerated mock type for the SynchronizerFullInterface type
type SynchronizerFullInterface struct {
	mock.Mock
}

type SynchronizerFullInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *SynchronizerFullInterface) EXPECT() *SynchronizerFullInterface_Expecter {
	return &SynchronizerFullInterface_Expecter{mock: &_m.Mock}
}

// CleanTrustedState provides a mock function with given fields:
func (_m *SynchronizerFullInterface) CleanTrustedState() {
	_m.Called()
}

// SynchronizerFullInterface_CleanTrustedState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanTrustedState'
type SynchronizerFullInterface_CleanTrustedState_Call struct {
	*mock.Call
}

// CleanTrustedState is a helper method to define mock.On call
func (_e *SynchronizerFullInterface_Expecter) CleanTrustedState() *SynchronizerFullInterface_CleanTrustedState_Call {
	return &SynchronizerFullInterface_CleanTrustedState_Call{Call: _e.mock.On("CleanTrustedState")}
}

func (_c *SynchronizerFullInterface_CleanTrustedState_Call) Run(run func()) *SynchronizerFullInterface_CleanTrustedState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SynchronizerFullInterface_CleanTrustedState_Call) Return() *SynchronizerFullInterface_CleanTrustedState_Call {
	_c.Call.Return()
	return _c
}

func (_c *SynchronizerFullInterface_CleanTrustedState_Call) RunAndReturn(run func()) *SynchronizerFullInterface_CleanTrustedState_Call {
	_c.Call.Return(run)
	return _c
}

// IsTrustedSequencer provides a mock function with given fields:
func (_m *SynchronizerFullInterface) IsTrustedSequencer() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsTrustedSequencer")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SynchronizerFullInterface_IsTrustedSequencer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTrustedSequencer'
type SynchronizerFullInterface_IsTrustedSequencer_Call struct {
	*mock.Call
}

// IsTrustedSequencer is a helper method to define mock.On call
func (_e *SynchronizerFullInterface_Expecter) IsTrustedSequencer() *SynchronizerFullInterface_IsTrustedSequencer_Call {
	return &SynchronizerFullInterface_IsTrustedSequencer_Call{Call: _e.mock.On("IsTrustedSequencer")}
}

func (_c *SynchronizerFullInterface_IsTrustedSequencer_Call) Run(run func()) *SynchronizerFullInterface_IsTrustedSequencer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SynchronizerFullInterface_IsTrustedSequencer_Call) Return(_a0 bool) *SynchronizerFullInterface_IsTrustedSequencer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SynchronizerFullInterface_IsTrustedSequencer_Call) RunAndReturn(run func() bool) *SynchronizerFullInterface_IsTrustedSequencer_Call {
	_c.Call.Return(run)
	return _c
}

// NewSynchronizerFullInterface creates a new instance of SynchronizerFullInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSynchronizerFullInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *SynchronizerFullInterface {
	mock := &SynchronizerFullInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
