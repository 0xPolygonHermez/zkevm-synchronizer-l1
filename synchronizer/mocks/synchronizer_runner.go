// Code generated by mockery. DO NOT EDIT.

package mock_synchronizer

import mock "github.com/stretchr/testify/mock"

// SynchronizerRunner is an autogenerated mock type for the SynchronizerRunner type
type SynchronizerRunner struct {
	mock.Mock
}

type SynchronizerRunner_Expecter struct {
	mock *mock.Mock
}

func (_m *SynchronizerRunner) EXPECT() *SynchronizerRunner_Expecter {
	return &SynchronizerRunner_Expecter{mock: &_m.Mock}
}

// Stop provides a mock function with given fields:
func (_m *SynchronizerRunner) Stop() {
	_m.Called()
}

// SynchronizerRunner_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type SynchronizerRunner_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *SynchronizerRunner_Expecter) Stop() *SynchronizerRunner_Stop_Call {
	return &SynchronizerRunner_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *SynchronizerRunner_Stop_Call) Run(run func()) *SynchronizerRunner_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SynchronizerRunner_Stop_Call) Return() *SynchronizerRunner_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *SynchronizerRunner_Stop_Call) RunAndReturn(run func()) *SynchronizerRunner_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// Sync provides a mock function with given fields: returnOnSync
func (_m *SynchronizerRunner) Sync(returnOnSync bool) error {
	ret := _m.Called(returnOnSync)

	if len(ret) == 0 {
		panic("no return value specified for Sync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(returnOnSync)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SynchronizerRunner_Sync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sync'
type SynchronizerRunner_Sync_Call struct {
	*mock.Call
}

// Sync is a helper method to define mock.On call
//   - returnOnSync bool
func (_e *SynchronizerRunner_Expecter) Sync(returnOnSync interface{}) *SynchronizerRunner_Sync_Call {
	return &SynchronizerRunner_Sync_Call{Call: _e.mock.On("Sync", returnOnSync)}
}

func (_c *SynchronizerRunner_Sync_Call) Run(run func(returnOnSync bool)) *SynchronizerRunner_Sync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *SynchronizerRunner_Sync_Call) Return(_a0 error) *SynchronizerRunner_Sync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SynchronizerRunner_Sync_Call) RunAndReturn(run func(bool) error) *SynchronizerRunner_Sync_Call {
	_c.Call.Return(run)
	return _c
}

// NewSynchronizerRunner creates a new instance of SynchronizerRunner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSynchronizerRunner(t interface {
	mock.TestingT
	Cleanup(func())
}) *SynchronizerRunner {
	mock := &SynchronizerRunner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
