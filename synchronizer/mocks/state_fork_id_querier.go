// Code generated by mockery. DO NOT EDIT.

package mock_synchronizer

import (
	context "context"

	entities "github.com/0xPolygonHermez/zkevm-synchronizer-l1/state/entities"
	mock "github.com/stretchr/testify/mock"
)

// StateForkIdQuerier is an autogenerated mock type for the StateForkIdQuerier type
type StateForkIdQuerier struct {
	mock.Mock
}

type StateForkIdQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *StateForkIdQuerier) EXPECT() *StateForkIdQuerier_Expecter {
	return &StateForkIdQuerier_Expecter{mock: &_m.Mock}
}

// GetForkIDByBatchNumber provides a mock function with given fields: ctx, batchNumber, dbTx
func (_m *StateForkIdQuerier) GetForkIDByBatchNumber(ctx context.Context, batchNumber uint64, dbTx entities.Tx) uint64 {
	ret := _m.Called(ctx, batchNumber, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for GetForkIDByBatchNumber")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context, uint64, entities.Tx) uint64); ok {
		r0 = rf(ctx, batchNumber, dbTx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// StateForkIdQuerier_GetForkIDByBatchNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetForkIDByBatchNumber'
type StateForkIdQuerier_GetForkIDByBatchNumber_Call struct {
	*mock.Call
}

// GetForkIDByBatchNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - batchNumber uint64
//   - dbTx entities.Tx
func (_e *StateForkIdQuerier_Expecter) GetForkIDByBatchNumber(ctx interface{}, batchNumber interface{}, dbTx interface{}) *StateForkIdQuerier_GetForkIDByBatchNumber_Call {
	return &StateForkIdQuerier_GetForkIDByBatchNumber_Call{Call: _e.mock.On("GetForkIDByBatchNumber", ctx, batchNumber, dbTx)}
}

func (_c *StateForkIdQuerier_GetForkIDByBatchNumber_Call) Run(run func(ctx context.Context, batchNumber uint64, dbTx entities.Tx)) *StateForkIdQuerier_GetForkIDByBatchNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(entities.Tx))
	})
	return _c
}

func (_c *StateForkIdQuerier_GetForkIDByBatchNumber_Call) Return(_a0 uint64) *StateForkIdQuerier_GetForkIDByBatchNumber_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateForkIdQuerier_GetForkIDByBatchNumber_Call) RunAndReturn(run func(context.Context, uint64, entities.Tx) uint64) *StateForkIdQuerier_GetForkIDByBatchNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetForkIDByBlockNumber provides a mock function with given fields: ctx, blockNumber, dbTx
func (_m *StateForkIdQuerier) GetForkIDByBlockNumber(ctx context.Context, blockNumber uint64, dbTx entities.Tx) uint64 {
	ret := _m.Called(ctx, blockNumber, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for GetForkIDByBlockNumber")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context, uint64, entities.Tx) uint64); ok {
		r0 = rf(ctx, blockNumber, dbTx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// StateForkIdQuerier_GetForkIDByBlockNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetForkIDByBlockNumber'
type StateForkIdQuerier_GetForkIDByBlockNumber_Call struct {
	*mock.Call
}

// GetForkIDByBlockNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - blockNumber uint64
//   - dbTx entities.Tx
func (_e *StateForkIdQuerier_Expecter) GetForkIDByBlockNumber(ctx interface{}, blockNumber interface{}, dbTx interface{}) *StateForkIdQuerier_GetForkIDByBlockNumber_Call {
	return &StateForkIdQuerier_GetForkIDByBlockNumber_Call{Call: _e.mock.On("GetForkIDByBlockNumber", ctx, blockNumber, dbTx)}
}

func (_c *StateForkIdQuerier_GetForkIDByBlockNumber_Call) Run(run func(ctx context.Context, blockNumber uint64, dbTx entities.Tx)) *StateForkIdQuerier_GetForkIDByBlockNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(entities.Tx))
	})
	return _c
}

func (_c *StateForkIdQuerier_GetForkIDByBlockNumber_Call) Return(_a0 uint64) *StateForkIdQuerier_GetForkIDByBlockNumber_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateForkIdQuerier_GetForkIDByBlockNumber_Call) RunAndReturn(run func(context.Context, uint64, entities.Tx) uint64) *StateForkIdQuerier_GetForkIDByBlockNumber_Call {
	_c.Call.Return(run)
	return _c
}

// NewStateForkIdQuerier creates a new instance of StateForkIdQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStateForkIdQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *StateForkIdQuerier {
	mock := &StateForkIdQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
