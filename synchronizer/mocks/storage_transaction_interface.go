// Code generated by mockery. DO NOT EDIT.

package mock_synchronizer

import (
	context "context"

	pgx "github.com/jackc/pgx/v4"
	mock "github.com/stretchr/testify/mock"
)

// StorageTransactionInterface is an autogenerated mock type for the StorageTransactionInterface type
type StorageTransactionInterface struct {
	mock.Mock
}

type StorageTransactionInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *StorageTransactionInterface) EXPECT() *StorageTransactionInterface_Expecter {
	return &StorageTransactionInterface_Expecter{mock: &_m.Mock}
}

// BeginDBTransaction provides a mock function with given fields: ctx
func (_m *StorageTransactionInterface) BeginDBTransaction(ctx context.Context) (pgx.Tx, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginDBTransaction")
	}

	var r0 pgx.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (pgx.Tx, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) pgx.Tx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorageTransactionInterface_BeginDBTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginDBTransaction'
type StorageTransactionInterface_BeginDBTransaction_Call struct {
	*mock.Call
}

// BeginDBTransaction is a helper method to define mock.On call
//   - ctx context.Context
func (_e *StorageTransactionInterface_Expecter) BeginDBTransaction(ctx interface{}) *StorageTransactionInterface_BeginDBTransaction_Call {
	return &StorageTransactionInterface_BeginDBTransaction_Call{Call: _e.mock.On("BeginDBTransaction", ctx)}
}

func (_c *StorageTransactionInterface_BeginDBTransaction_Call) Run(run func(ctx context.Context)) *StorageTransactionInterface_BeginDBTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *StorageTransactionInterface_BeginDBTransaction_Call) Return(_a0 pgx.Tx, _a1 error) *StorageTransactionInterface_BeginDBTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StorageTransactionInterface_BeginDBTransaction_Call) RunAndReturn(run func(context.Context) (pgx.Tx, error)) *StorageTransactionInterface_BeginDBTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// BeginStateTransaction provides a mock function with given fields: ctx
func (_m *StorageTransactionInterface) BeginStateTransaction(ctx context.Context) (pgx.Tx, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginStateTransaction")
	}

	var r0 pgx.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (pgx.Tx, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) pgx.Tx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorageTransactionInterface_BeginStateTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginStateTransaction'
type StorageTransactionInterface_BeginStateTransaction_Call struct {
	*mock.Call
}

// BeginStateTransaction is a helper method to define mock.On call
//   - ctx context.Context
func (_e *StorageTransactionInterface_Expecter) BeginStateTransaction(ctx interface{}) *StorageTransactionInterface_BeginStateTransaction_Call {
	return &StorageTransactionInterface_BeginStateTransaction_Call{Call: _e.mock.On("BeginStateTransaction", ctx)}
}

func (_c *StorageTransactionInterface_BeginStateTransaction_Call) Run(run func(ctx context.Context)) *StorageTransactionInterface_BeginStateTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *StorageTransactionInterface_BeginStateTransaction_Call) Return(_a0 pgx.Tx, _a1 error) *StorageTransactionInterface_BeginStateTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StorageTransactionInterface_BeginStateTransaction_Call) RunAndReturn(run func(context.Context) (pgx.Tx, error)) *StorageTransactionInterface_BeginStateTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with given fields: ctx, dbTx
func (_m *StorageTransactionInterface) Commit(ctx context.Context, dbTx pgx.Tx) error {
	ret := _m.Called(ctx, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx) error); ok {
		r0 = rf(ctx, dbTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StorageTransactionInterface_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type StorageTransactionInterface_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTx pgx.Tx
func (_e *StorageTransactionInterface_Expecter) Commit(ctx interface{}, dbTx interface{}) *StorageTransactionInterface_Commit_Call {
	return &StorageTransactionInterface_Commit_Call{Call: _e.mock.On("Commit", ctx, dbTx)}
}

func (_c *StorageTransactionInterface_Commit_Call) Run(run func(ctx context.Context, dbTx pgx.Tx)) *StorageTransactionInterface_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgx.Tx))
	})
	return _c
}

func (_c *StorageTransactionInterface_Commit_Call) Return(_a0 error) *StorageTransactionInterface_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StorageTransactionInterface_Commit_Call) RunAndReturn(run func(context.Context, pgx.Tx) error) *StorageTransactionInterface_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function with given fields: ctx, dbTx
func (_m *StorageTransactionInterface) Rollback(ctx context.Context, dbTx pgx.Tx) error {
	ret := _m.Called(ctx, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx) error); ok {
		r0 = rf(ctx, dbTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StorageTransactionInterface_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type StorageTransactionInterface_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTx pgx.Tx
func (_e *StorageTransactionInterface_Expecter) Rollback(ctx interface{}, dbTx interface{}) *StorageTransactionInterface_Rollback_Call {
	return &StorageTransactionInterface_Rollback_Call{Call: _e.mock.On("Rollback", ctx, dbTx)}
}

func (_c *StorageTransactionInterface_Rollback_Call) Run(run func(ctx context.Context, dbTx pgx.Tx)) *StorageTransactionInterface_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgx.Tx))
	})
	return _c
}

func (_c *StorageTransactionInterface_Rollback_Call) Return(_a0 error) *StorageTransactionInterface_Rollback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StorageTransactionInterface_Rollback_Call) RunAndReturn(run func(context.Context, pgx.Tx) error) *StorageTransactionInterface_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorageTransactionInterface creates a new instance of StorageTransactionInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorageTransactionInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageTransactionInterface {
	mock := &StorageTransactionInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
