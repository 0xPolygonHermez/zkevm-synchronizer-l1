// Code generated by mockery. DO NOT EDIT.

package mock_synchronizer

import (
	context "context"

	entities "github.com/0xPolygonHermez/zkevm-synchronizer-l1/state/entities"

	mock "github.com/stretchr/testify/mock"
)

// StateReorgInterface is an autogenerated mock type for the StateReorgInterface type
type StateReorgInterface struct {
	mock.Mock
}

type StateReorgInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *StateReorgInterface) EXPECT() *StateReorgInterface_Expecter {
	return &StateReorgInterface_Expecter{mock: &_m.Mock}
}

// BeginTransaction provides a mock function with given fields: ctx
func (_m *StateReorgInterface) BeginTransaction(ctx context.Context) (entities.Tx, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTransaction")
	}

	var r0 entities.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (entities.Tx, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) entities.Tx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entities.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateReorgInterface_BeginTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTransaction'
type StateReorgInterface_BeginTransaction_Call struct {
	*mock.Call
}

// BeginTransaction is a helper method to define mock.On call
//   - ctx context.Context
func (_e *StateReorgInterface_Expecter) BeginTransaction(ctx interface{}) *StateReorgInterface_BeginTransaction_Call {
	return &StateReorgInterface_BeginTransaction_Call{Call: _e.mock.On("BeginTransaction", ctx)}
}

func (_c *StateReorgInterface_BeginTransaction_Call) Run(run func(ctx context.Context)) *StateReorgInterface_BeginTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *StateReorgInterface_BeginTransaction_Call) Return(_a0 entities.Tx, _a1 error) *StateReorgInterface_BeginTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateReorgInterface_BeginTransaction_Call) RunAndReturn(run func(context.Context) (entities.Tx, error)) *StateReorgInterface_BeginTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetPreviousBlock provides a mock function with given fields: ctx, depth, tx
func (_m *StateReorgInterface) GetPreviousBlock(ctx context.Context, depth uint64, tx entities.Tx) (*entities.L1Block, error) {
	ret := _m.Called(ctx, depth, tx)

	if len(ret) == 0 {
		panic("no return value specified for GetPreviousBlock")
	}

	var r0 *entities.L1Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, entities.Tx) (*entities.L1Block, error)); ok {
		return rf(ctx, depth, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, entities.Tx) *entities.L1Block); ok {
		r0 = rf(ctx, depth, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.L1Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, entities.Tx) error); ok {
		r1 = rf(ctx, depth, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateReorgInterface_GetPreviousBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPreviousBlock'
type StateReorgInterface_GetPreviousBlock_Call struct {
	*mock.Call
}

// GetPreviousBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - depth uint64
//   - tx entities.Tx
func (_e *StateReorgInterface_Expecter) GetPreviousBlock(ctx interface{}, depth interface{}, tx interface{}) *StateReorgInterface_GetPreviousBlock_Call {
	return &StateReorgInterface_GetPreviousBlock_Call{Call: _e.mock.On("GetPreviousBlock", ctx, depth, tx)}
}

func (_c *StateReorgInterface_GetPreviousBlock_Call) Run(run func(ctx context.Context, depth uint64, tx entities.Tx)) *StateReorgInterface_GetPreviousBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(entities.Tx))
	})
	return _c
}

func (_c *StateReorgInterface_GetPreviousBlock_Call) Return(_a0 *entities.L1Block, _a1 error) *StateReorgInterface_GetPreviousBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateReorgInterface_GetPreviousBlock_Call) RunAndReturn(run func(context.Context, uint64, entities.Tx) (*entities.L1Block, error)) *StateReorgInterface_GetPreviousBlock_Call {
	_c.Call.Return(run)
	return _c
}

// NewStateReorgInterface creates a new instance of StateReorgInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStateReorgInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *StateReorgInterface {
	mock := &StateReorgInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
