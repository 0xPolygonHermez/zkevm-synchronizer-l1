// Code generated by mockery. DO NOT EDIT.

package mock_synchronizer

import (
	context "context"

	synchronizer "github.com/0xPolygonHermez/zkevm-synchronizer-l1/synchronizer"
	mock "github.com/stretchr/testify/mock"
)

// SynchronizerVirtualBatchesQuerier is an autogenerated mock type for the SynchronizerVirtualBatchesQuerier type
type SynchronizerVirtualBatchesQuerier struct {
	mock.Mock
}

type SynchronizerVirtualBatchesQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *SynchronizerVirtualBatchesQuerier) EXPECT() *SynchronizerVirtualBatchesQuerier_Expecter {
	return &SynchronizerVirtualBatchesQuerier_Expecter{mock: &_m.Mock}
}

// GetLastestVirtualBatchNumber provides a mock function with given fields: ctx
func (_m *SynchronizerVirtualBatchesQuerier) GetLastestVirtualBatchNumber(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLastestVirtualBatchNumber")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SynchronizerVirtualBatchesQuerier_GetLastestVirtualBatchNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastestVirtualBatchNumber'
type SynchronizerVirtualBatchesQuerier_GetLastestVirtualBatchNumber_Call struct {
	*mock.Call
}

// GetLastestVirtualBatchNumber is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SynchronizerVirtualBatchesQuerier_Expecter) GetLastestVirtualBatchNumber(ctx interface{}) *SynchronizerVirtualBatchesQuerier_GetLastestVirtualBatchNumber_Call {
	return &SynchronizerVirtualBatchesQuerier_GetLastestVirtualBatchNumber_Call{Call: _e.mock.On("GetLastestVirtualBatchNumber", ctx)}
}

func (_c *SynchronizerVirtualBatchesQuerier_GetLastestVirtualBatchNumber_Call) Run(run func(ctx context.Context)) *SynchronizerVirtualBatchesQuerier_GetLastestVirtualBatchNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SynchronizerVirtualBatchesQuerier_GetLastestVirtualBatchNumber_Call) Return(_a0 uint64, _a1 error) *SynchronizerVirtualBatchesQuerier_GetLastestVirtualBatchNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SynchronizerVirtualBatchesQuerier_GetLastestVirtualBatchNumber_Call) RunAndReturn(run func(context.Context) (uint64, error)) *SynchronizerVirtualBatchesQuerier_GetLastestVirtualBatchNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetVirtualBatchByBatchNumber provides a mock function with given fields: ctx, batchNumber
func (_m *SynchronizerVirtualBatchesQuerier) GetVirtualBatchByBatchNumber(ctx context.Context, batchNumber uint64) (*synchronizer.VirtualBatch, error) {
	ret := _m.Called(ctx, batchNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetVirtualBatchByBatchNumber")
	}

	var r0 *synchronizer.VirtualBatch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*synchronizer.VirtualBatch, error)); ok {
		return rf(ctx, batchNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *synchronizer.VirtualBatch); ok {
		r0 = rf(ctx, batchNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*synchronizer.VirtualBatch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, batchNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SynchronizerVirtualBatchesQuerier_GetVirtualBatchByBatchNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVirtualBatchByBatchNumber'
type SynchronizerVirtualBatchesQuerier_GetVirtualBatchByBatchNumber_Call struct {
	*mock.Call
}

// GetVirtualBatchByBatchNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - batchNumber uint64
func (_e *SynchronizerVirtualBatchesQuerier_Expecter) GetVirtualBatchByBatchNumber(ctx interface{}, batchNumber interface{}) *SynchronizerVirtualBatchesQuerier_GetVirtualBatchByBatchNumber_Call {
	return &SynchronizerVirtualBatchesQuerier_GetVirtualBatchByBatchNumber_Call{Call: _e.mock.On("GetVirtualBatchByBatchNumber", ctx, batchNumber)}
}

func (_c *SynchronizerVirtualBatchesQuerier_GetVirtualBatchByBatchNumber_Call) Run(run func(ctx context.Context, batchNumber uint64)) *SynchronizerVirtualBatchesQuerier_GetVirtualBatchByBatchNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *SynchronizerVirtualBatchesQuerier_GetVirtualBatchByBatchNumber_Call) Return(_a0 *synchronizer.VirtualBatch, _a1 error) *SynchronizerVirtualBatchesQuerier_GetVirtualBatchByBatchNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SynchronizerVirtualBatchesQuerier_GetVirtualBatchByBatchNumber_Call) RunAndReturn(run func(context.Context, uint64) (*synchronizer.VirtualBatch, error)) *SynchronizerVirtualBatchesQuerier_GetVirtualBatchByBatchNumber_Call {
	_c.Call.Return(run)
	return _c
}

// NewSynchronizerVirtualBatchesQuerier creates a new instance of SynchronizerVirtualBatchesQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSynchronizerVirtualBatchesQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *SynchronizerVirtualBatchesQuerier {
	mock := &SynchronizerVirtualBatchesQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
