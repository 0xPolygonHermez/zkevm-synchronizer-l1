// Code generated by mockery. DO NOT EDIT.

package mock_synchronizer

import (
	context "context"
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"

	etherman "github.com/0xPolygonHermez/zkevm-synchronizer-l1/etherman"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// EthermanInterface is an autogenerated mock type for the EthermanInterface type
type EthermanInterface struct {
	mock.Mock
}

type EthermanInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *EthermanInterface) EXPECT() *EthermanInterface_Expecter {
	return &EthermanInterface_Expecter{mock: &_m.Mock}
}

// EthBlockByNumber provides a mock function with given fields: ctx, blockNumber
func (_m *EthermanInterface) EthBlockByNumber(ctx context.Context, blockNumber uint64) (*types.Block, error) {
	ret := _m.Called(ctx, blockNumber)

	if len(ret) == 0 {
		panic("no return value specified for EthBlockByNumber")
	}

	var r0 *types.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*types.Block, error)); ok {
		return rf(ctx, blockNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *types.Block); ok {
		r0 = rf(ctx, blockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, blockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EthermanInterface_EthBlockByNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EthBlockByNumber'
type EthermanInterface_EthBlockByNumber_Call struct {
	*mock.Call
}

// EthBlockByNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - blockNumber uint64
func (_e *EthermanInterface_Expecter) EthBlockByNumber(ctx interface{}, blockNumber interface{}) *EthermanInterface_EthBlockByNumber_Call {
	return &EthermanInterface_EthBlockByNumber_Call{Call: _e.mock.On("EthBlockByNumber", ctx, blockNumber)}
}

func (_c *EthermanInterface_EthBlockByNumber_Call) Run(run func(ctx context.Context, blockNumber uint64)) *EthermanInterface_EthBlockByNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *EthermanInterface_EthBlockByNumber_Call) Return(_a0 *types.Block, _a1 error) *EthermanInterface_EthBlockByNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EthermanInterface_EthBlockByNumber_Call) RunAndReturn(run func(context.Context, uint64) (*types.Block, error)) *EthermanInterface_EthBlockByNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetFinalizedBlockNumber provides a mock function with given fields: ctx
func (_m *EthermanInterface) GetFinalizedBlockNumber(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetFinalizedBlockNumber")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EthermanInterface_GetFinalizedBlockNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFinalizedBlockNumber'
type EthermanInterface_GetFinalizedBlockNumber_Call struct {
	*mock.Call
}

// GetFinalizedBlockNumber is a helper method to define mock.On call
//   - ctx context.Context
func (_e *EthermanInterface_Expecter) GetFinalizedBlockNumber(ctx interface{}) *EthermanInterface_GetFinalizedBlockNumber_Call {
	return &EthermanInterface_GetFinalizedBlockNumber_Call{Call: _e.mock.On("GetFinalizedBlockNumber", ctx)}
}

func (_c *EthermanInterface_GetFinalizedBlockNumber_Call) Run(run func(ctx context.Context)) *EthermanInterface_GetFinalizedBlockNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *EthermanInterface_GetFinalizedBlockNumber_Call) Return(_a0 uint64, _a1 error) *EthermanInterface_GetFinalizedBlockNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EthermanInterface_GetFinalizedBlockNumber_Call) RunAndReturn(run func(context.Context) (uint64, error)) *EthermanInterface_GetFinalizedBlockNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetForks provides a mock function with given fields: ctx, genBlockNumber, lastL1BlockSynced
func (_m *EthermanInterface) GetForks(ctx context.Context, genBlockNumber uint64, lastL1BlockSynced uint64) ([]etherman.ForkIDInterval, error) {
	ret := _m.Called(ctx, genBlockNumber, lastL1BlockSynced)

	if len(ret) == 0 {
		panic("no return value specified for GetForks")
	}

	var r0 []etherman.ForkIDInterval
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) ([]etherman.ForkIDInterval, error)); ok {
		return rf(ctx, genBlockNumber, lastL1BlockSynced)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) []etherman.ForkIDInterval); ok {
		r0 = rf(ctx, genBlockNumber, lastL1BlockSynced)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]etherman.ForkIDInterval)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64) error); ok {
		r1 = rf(ctx, genBlockNumber, lastL1BlockSynced)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EthermanInterface_GetForks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetForks'
type EthermanInterface_GetForks_Call struct {
	*mock.Call
}

// GetForks is a helper method to define mock.On call
//   - ctx context.Context
//   - genBlockNumber uint64
//   - lastL1BlockSynced uint64
func (_e *EthermanInterface_Expecter) GetForks(ctx interface{}, genBlockNumber interface{}, lastL1BlockSynced interface{}) *EthermanInterface_GetForks_Call {
	return &EthermanInterface_GetForks_Call{Call: _e.mock.On("GetForks", ctx, genBlockNumber, lastL1BlockSynced)}
}

func (_c *EthermanInterface_GetForks_Call) Run(run func(ctx context.Context, genBlockNumber uint64, lastL1BlockSynced uint64)) *EthermanInterface_GetForks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(uint64))
	})
	return _c
}

func (_c *EthermanInterface_GetForks_Call) Return(_a0 []etherman.ForkIDInterval, _a1 error) *EthermanInterface_GetForks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EthermanInterface_GetForks_Call) RunAndReturn(run func(context.Context, uint64, uint64) ([]etherman.ForkIDInterval, error)) *EthermanInterface_GetForks_Call {
	_c.Call.Return(run)
	return _c
}

// GetL1BlockUpgradeLxLy provides a mock function with given fields: ctx, genesisBlock
func (_m *EthermanInterface) GetL1BlockUpgradeLxLy(ctx context.Context, genesisBlock *uint64) (uint64, error) {
	ret := _m.Called(ctx, genesisBlock)

	if len(ret) == 0 {
		panic("no return value specified for GetL1BlockUpgradeLxLy")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *uint64) (uint64, error)); ok {
		return rf(ctx, genesisBlock)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *uint64) uint64); ok {
		r0 = rf(ctx, genesisBlock)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *uint64) error); ok {
		r1 = rf(ctx, genesisBlock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EthermanInterface_GetL1BlockUpgradeLxLy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetL1BlockUpgradeLxLy'
type EthermanInterface_GetL1BlockUpgradeLxLy_Call struct {
	*mock.Call
}

// GetL1BlockUpgradeLxLy is a helper method to define mock.On call
//   - ctx context.Context
//   - genesisBlock *uint64
func (_e *EthermanInterface_Expecter) GetL1BlockUpgradeLxLy(ctx interface{}, genesisBlock interface{}) *EthermanInterface_GetL1BlockUpgradeLxLy_Call {
	return &EthermanInterface_GetL1BlockUpgradeLxLy_Call{Call: _e.mock.On("GetL1BlockUpgradeLxLy", ctx, genesisBlock)}
}

func (_c *EthermanInterface_GetL1BlockUpgradeLxLy_Call) Run(run func(ctx context.Context, genesisBlock *uint64)) *EthermanInterface_GetL1BlockUpgradeLxLy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*uint64))
	})
	return _c
}

func (_c *EthermanInterface_GetL1BlockUpgradeLxLy_Call) Return(_a0 uint64, _a1 error) *EthermanInterface_GetL1BlockUpgradeLxLy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EthermanInterface_GetL1BlockUpgradeLxLy_Call) RunAndReturn(run func(context.Context, *uint64) (uint64, error)) *EthermanInterface_GetL1BlockUpgradeLxLy_Call {
	_c.Call.Return(run)
	return _c
}

// GetRollupID provides a mock function with given fields:
func (_m *EthermanInterface) GetRollupID() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRollupID")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// EthermanInterface_GetRollupID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRollupID'
type EthermanInterface_GetRollupID_Call struct {
	*mock.Call
}

// GetRollupID is a helper method to define mock.On call
func (_e *EthermanInterface_Expecter) GetRollupID() *EthermanInterface_GetRollupID_Call {
	return &EthermanInterface_GetRollupID_Call{Call: _e.mock.On("GetRollupID")}
}

func (_c *EthermanInterface_GetRollupID_Call) Run(run func()) *EthermanInterface_GetRollupID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EthermanInterface_GetRollupID_Call) Return(_a0 uint) *EthermanInterface_GetRollupID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EthermanInterface_GetRollupID_Call) RunAndReturn(run func() uint) *EthermanInterface_GetRollupID_Call {
	_c.Call.Return(run)
	return _c
}

// GetRollupInfoByBlockRange provides a mock function with given fields: ctx, fromBlock, toBlock
func (_m *EthermanInterface) GetRollupInfoByBlockRange(ctx context.Context, fromBlock uint64, toBlock *uint64) ([]etherman.Block, map[common.Hash][]etherman.Order, error) {
	ret := _m.Called(ctx, fromBlock, toBlock)

	if len(ret) == 0 {
		panic("no return value specified for GetRollupInfoByBlockRange")
	}

	var r0 []etherman.Block
	var r1 map[common.Hash][]etherman.Order
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, *uint64) ([]etherman.Block, map[common.Hash][]etherman.Order, error)); ok {
		return rf(ctx, fromBlock, toBlock)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, *uint64) []etherman.Block); ok {
		r0 = rf(ctx, fromBlock, toBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]etherman.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, *uint64) map[common.Hash][]etherman.Order); ok {
		r1 = rf(ctx, fromBlock, toBlock)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[common.Hash][]etherman.Order)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uint64, *uint64) error); ok {
		r2 = rf(ctx, fromBlock, toBlock)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EthermanInterface_GetRollupInfoByBlockRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRollupInfoByBlockRange'
type EthermanInterface_GetRollupInfoByBlockRange_Call struct {
	*mock.Call
}

// GetRollupInfoByBlockRange is a helper method to define mock.On call
//   - ctx context.Context
//   - fromBlock uint64
//   - toBlock *uint64
func (_e *EthermanInterface_Expecter) GetRollupInfoByBlockRange(ctx interface{}, fromBlock interface{}, toBlock interface{}) *EthermanInterface_GetRollupInfoByBlockRange_Call {
	return &EthermanInterface_GetRollupInfoByBlockRange_Call{Call: _e.mock.On("GetRollupInfoByBlockRange", ctx, fromBlock, toBlock)}
}

func (_c *EthermanInterface_GetRollupInfoByBlockRange_Call) Run(run func(ctx context.Context, fromBlock uint64, toBlock *uint64)) *EthermanInterface_GetRollupInfoByBlockRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(*uint64))
	})
	return _c
}

func (_c *EthermanInterface_GetRollupInfoByBlockRange_Call) Return(_a0 []etherman.Block, _a1 map[common.Hash][]etherman.Order, _a2 error) *EthermanInterface_GetRollupInfoByBlockRange_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *EthermanInterface_GetRollupInfoByBlockRange_Call) RunAndReturn(run func(context.Context, uint64, *uint64) ([]etherman.Block, map[common.Hash][]etherman.Order, error)) *EthermanInterface_GetRollupInfoByBlockRange_Call {
	_c.Call.Return(run)
	return _c
}

// HeaderByNumber provides a mock function with given fields: ctx, number
func (_m *EthermanInterface) HeaderByNumber(ctx context.Context, number *big.Int) (*types.Header, error) {
	ret := _m.Called(ctx, number)

	if len(ret) == 0 {
		panic("no return value specified for HeaderByNumber")
	}

	var r0 *types.Header
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int) (*types.Header, error)); ok {
		return rf(ctx, number)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int) *types.Header); ok {
		r0 = rf(ctx, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *big.Int) error); ok {
		r1 = rf(ctx, number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EthermanInterface_HeaderByNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeaderByNumber'
type EthermanInterface_HeaderByNumber_Call struct {
	*mock.Call
}

// HeaderByNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - number *big.Int
func (_e *EthermanInterface_Expecter) HeaderByNumber(ctx interface{}, number interface{}) *EthermanInterface_HeaderByNumber_Call {
	return &EthermanInterface_HeaderByNumber_Call{Call: _e.mock.On("HeaderByNumber", ctx, number)}
}

func (_c *EthermanInterface_HeaderByNumber_Call) Run(run func(ctx context.Context, number *big.Int)) *EthermanInterface_HeaderByNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*big.Int))
	})
	return _c
}

func (_c *EthermanInterface_HeaderByNumber_Call) Return(_a0 *types.Header, _a1 error) *EthermanInterface_HeaderByNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EthermanInterface_HeaderByNumber_Call) RunAndReturn(run func(context.Context, *big.Int) (*types.Header, error)) *EthermanInterface_HeaderByNumber_Call {
	_c.Call.Return(run)
	return _c
}

// NewEthermanInterface creates a new instance of EthermanInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEthermanInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *EthermanInterface {
	mock := &EthermanInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
