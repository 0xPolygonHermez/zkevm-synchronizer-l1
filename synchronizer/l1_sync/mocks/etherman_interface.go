// Code generated by mockery. DO NOT EDIT.

package mock_l1sync

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	etherman "github.com/0xPolygonHermez/zkevm-synchronizer-l1/etherman"

	mock "github.com/stretchr/testify/mock"
)

// EthermanInterface is an autogenerated mock type for the EthermanInterface type
type EthermanInterface struct {
	mock.Mock
}

type EthermanInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *EthermanInterface) EXPECT() *EthermanInterface_Expecter {
	return &EthermanInterface_Expecter{mock: &_m.Mock}
}

// GetL1BlockByNumber provides a mock function with given fields: ctx, blockNumber
func (_m *EthermanInterface) GetL1BlockByNumber(ctx context.Context, blockNumber uint64) (*etherman.Block, error) {
	ret := _m.Called(ctx, blockNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetL1BlockByNumber")
	}

	var r0 *etherman.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*etherman.Block, error)); ok {
		return rf(ctx, blockNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *etherman.Block); ok {
		r0 = rf(ctx, blockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*etherman.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, blockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EthermanInterface_GetL1BlockByNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetL1BlockByNumber'
type EthermanInterface_GetL1BlockByNumber_Call struct {
	*mock.Call
}

// GetL1BlockByNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - blockNumber uint64
func (_e *EthermanInterface_Expecter) GetL1BlockByNumber(ctx interface{}, blockNumber interface{}) *EthermanInterface_GetL1BlockByNumber_Call {
	return &EthermanInterface_GetL1BlockByNumber_Call{Call: _e.mock.On("GetL1BlockByNumber", ctx, blockNumber)}
}

func (_c *EthermanInterface_GetL1BlockByNumber_Call) Run(run func(ctx context.Context, blockNumber uint64)) *EthermanInterface_GetL1BlockByNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *EthermanInterface_GetL1BlockByNumber_Call) Return(_a0 *etherman.Block, _a1 error) *EthermanInterface_GetL1BlockByNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EthermanInterface_GetL1BlockByNumber_Call) RunAndReturn(run func(context.Context, uint64) (*etherman.Block, error)) *EthermanInterface_GetL1BlockByNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetRollupInfoByBlockRange provides a mock function with given fields: ctx, fromBlock, toBlock
func (_m *EthermanInterface) GetRollupInfoByBlockRange(ctx context.Context, fromBlock uint64, toBlock *uint64) ([]etherman.Block, map[common.Hash][]etherman.Order, error) {
	ret := _m.Called(ctx, fromBlock, toBlock)

	if len(ret) == 0 {
		panic("no return value specified for GetRollupInfoByBlockRange")
	}

	var r0 []etherman.Block
	var r1 map[common.Hash][]etherman.Order
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, *uint64) ([]etherman.Block, map[common.Hash][]etherman.Order, error)); ok {
		return rf(ctx, fromBlock, toBlock)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, *uint64) []etherman.Block); ok {
		r0 = rf(ctx, fromBlock, toBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]etherman.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, *uint64) map[common.Hash][]etherman.Order); ok {
		r1 = rf(ctx, fromBlock, toBlock)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[common.Hash][]etherman.Order)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uint64, *uint64) error); ok {
		r2 = rf(ctx, fromBlock, toBlock)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EthermanInterface_GetRollupInfoByBlockRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRollupInfoByBlockRange'
type EthermanInterface_GetRollupInfoByBlockRange_Call struct {
	*mock.Call
}

// GetRollupInfoByBlockRange is a helper method to define mock.On call
//   - ctx context.Context
//   - fromBlock uint64
//   - toBlock *uint64
func (_e *EthermanInterface_Expecter) GetRollupInfoByBlockRange(ctx interface{}, fromBlock interface{}, toBlock interface{}) *EthermanInterface_GetRollupInfoByBlockRange_Call {
	return &EthermanInterface_GetRollupInfoByBlockRange_Call{Call: _e.mock.On("GetRollupInfoByBlockRange", ctx, fromBlock, toBlock)}
}

func (_c *EthermanInterface_GetRollupInfoByBlockRange_Call) Run(run func(ctx context.Context, fromBlock uint64, toBlock *uint64)) *EthermanInterface_GetRollupInfoByBlockRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(*uint64))
	})
	return _c
}

func (_c *EthermanInterface_GetRollupInfoByBlockRange_Call) Return(_a0 []etherman.Block, _a1 map[common.Hash][]etherman.Order, _a2 error) *EthermanInterface_GetRollupInfoByBlockRange_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *EthermanInterface_GetRollupInfoByBlockRange_Call) RunAndReturn(run func(context.Context, uint64, *uint64) ([]etherman.Block, map[common.Hash][]etherman.Order, error)) *EthermanInterface_GetRollupInfoByBlockRange_Call {
	_c.Call.Return(run)
	return _c
}

// NewEthermanInterface creates a new instance of EthermanInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEthermanInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *EthermanInterface {
	mock := &EthermanInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
