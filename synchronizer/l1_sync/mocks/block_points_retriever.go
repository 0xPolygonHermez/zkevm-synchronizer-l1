// Code generated by mockery. DO NOT EDIT.

package mock_l1sync

import (
	context "context"

	l1sync "github.com/0xPolygonHermez/zkevm-synchronizer-l1/synchronizer/l1_sync"
	mock "github.com/stretchr/testify/mock"
)

// BlockPointsRetriever is an autogenerated mock type for the BlockPointsRetriever type
type BlockPointsRetriever struct {
	mock.Mock
}

type BlockPointsRetriever_Expecter struct {
	mock *mock.Mock
}

func (_m *BlockPointsRetriever) EXPECT() *BlockPointsRetriever_Expecter {
	return &BlockPointsRetriever_Expecter{mock: &_m.Mock}
}

// GetL1BlockPoints provides a mock function with given fields: ctx
func (_m *BlockPointsRetriever) GetL1BlockPoints(ctx context.Context) (l1sync.BlockPoints, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetL1BlockPoints")
	}

	var r0 l1sync.BlockPoints
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (l1sync.BlockPoints, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) l1sync.BlockPoints); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(l1sync.BlockPoints)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockPointsRetriever_GetL1BlockPoints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetL1BlockPoints'
type BlockPointsRetriever_GetL1BlockPoints_Call struct {
	*mock.Call
}

// GetL1BlockPoints is a helper method to define mock.On call
//   - ctx context.Context
func (_e *BlockPointsRetriever_Expecter) GetL1BlockPoints(ctx interface{}) *BlockPointsRetriever_GetL1BlockPoints_Call {
	return &BlockPointsRetriever_GetL1BlockPoints_Call{Call: _e.mock.On("GetL1BlockPoints", ctx)}
}

func (_c *BlockPointsRetriever_GetL1BlockPoints_Call) Run(run func(ctx context.Context)) *BlockPointsRetriever_GetL1BlockPoints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *BlockPointsRetriever_GetL1BlockPoints_Call) Return(_a0 l1sync.BlockPoints, _a1 error) *BlockPointsRetriever_GetL1BlockPoints_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockPointsRetriever_GetL1BlockPoints_Call) RunAndReturn(run func(context.Context) (l1sync.BlockPoints, error)) *BlockPointsRetriever_GetL1BlockPoints_Call {
	_c.Call.Return(run)
	return _c
}

// NewBlockPointsRetriever creates a new instance of BlockPointsRetriever. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlockPointsRetriever(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlockPointsRetriever {
	mock := &BlockPointsRetriever{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
