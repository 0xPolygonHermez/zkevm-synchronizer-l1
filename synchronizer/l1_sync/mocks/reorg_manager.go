// Code generated by mockery. DO NOT EDIT.

package mock_l1sync

import (
	etherman "github.com/0xPolygonHermez/zkevm-synchronizer-l1/etherman"
	entities "github.com/0xPolygonHermez/zkevm-synchronizer-l1/state/entities"

	mock "github.com/stretchr/testify/mock"
)

// ReorgManager is an autogenerated mock type for the ReorgManager type
type ReorgManager struct {
	mock.Mock
}

type ReorgManager_Expecter struct {
	mock *mock.Mock
}

func (_m *ReorgManager) EXPECT() *ReorgManager_Expecter {
	return &ReorgManager_Expecter{mock: &_m.Mock}
}

// CheckReorg provides a mock function with given fields: latestBlock, syncedBlock
func (_m *ReorgManager) CheckReorg(latestBlock *entities.L1Block, syncedBlock *etherman.Block) (*entities.L1Block, uint64, error) {
	ret := _m.Called(latestBlock, syncedBlock)

	if len(ret) == 0 {
		panic("no return value specified for CheckReorg")
	}

	var r0 *entities.L1Block
	var r1 uint64
	var r2 error
	if rf, ok := ret.Get(0).(func(*entities.L1Block, *etherman.Block) (*entities.L1Block, uint64, error)); ok {
		return rf(latestBlock, syncedBlock)
	}
	if rf, ok := ret.Get(0).(func(*entities.L1Block, *etherman.Block) *entities.L1Block); ok {
		r0 = rf(latestBlock, syncedBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.L1Block)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.L1Block, *etherman.Block) uint64); ok {
		r1 = rf(latestBlock, syncedBlock)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	if rf, ok := ret.Get(2).(func(*entities.L1Block, *etherman.Block) error); ok {
		r2 = rf(latestBlock, syncedBlock)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReorgManager_CheckReorg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckReorg'
type ReorgManager_CheckReorg_Call struct {
	*mock.Call
}

// CheckReorg is a helper method to define mock.On call
//   - latestBlock *entities.L1Block
//   - syncedBlock *etherman.Block
func (_e *ReorgManager_Expecter) CheckReorg(latestBlock interface{}, syncedBlock interface{}) *ReorgManager_CheckReorg_Call {
	return &ReorgManager_CheckReorg_Call{Call: _e.mock.On("CheckReorg", latestBlock, syncedBlock)}
}

func (_c *ReorgManager_CheckReorg_Call) Run(run func(latestBlock *entities.L1Block, syncedBlock *etherman.Block)) *ReorgManager_CheckReorg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.L1Block), args[1].(*etherman.Block))
	})
	return _c
}

func (_c *ReorgManager_CheckReorg_Call) Return(_a0 *entities.L1Block, _a1 uint64, _a2 error) *ReorgManager_CheckReorg_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ReorgManager_CheckReorg_Call) RunAndReturn(run func(*entities.L1Block, *etherman.Block) (*entities.L1Block, uint64, error)) *ReorgManager_CheckReorg_Call {
	_c.Call.Return(run)
	return _c
}

// NewReorgManager creates a new instance of ReorgManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReorgManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReorgManager {
	mock := &ReorgManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
