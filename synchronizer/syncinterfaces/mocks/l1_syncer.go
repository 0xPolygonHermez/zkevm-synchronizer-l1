// Code generated by mockery. DO NOT EDIT.

package mock_syncinterfaces

import (
	context "context"

	entities "github.com/0xPolygonHermez/zkevm-synchronizer-l1/state/entities"
	mock "github.com/stretchr/testify/mock"
)

// L1Syncer is an autogenerated mock type for the L1Syncer type
type L1Syncer struct {
	mock.Mock
}

type L1Syncer_Expecter struct {
	mock *mock.Mock
}

func (_m *L1Syncer) EXPECT() *L1Syncer_Expecter {
	return &L1Syncer_Expecter{mock: &_m.Mock}
}

// SyncBlocks provides a mock function with given fields: ctx, lastEthBlockSynced
func (_m *L1Syncer) SyncBlocks(ctx context.Context, lastEthBlockSynced *entities.L1Block) (*entities.L1Block, bool, error) {
	ret := _m.Called(ctx, lastEthBlockSynced)

	if len(ret) == 0 {
		panic("no return value specified for SyncBlocks")
	}

	var r0 *entities.L1Block
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.L1Block) (*entities.L1Block, bool, error)); ok {
		return rf(ctx, lastEthBlockSynced)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.L1Block) *entities.L1Block); ok {
		r0 = rf(ctx, lastEthBlockSynced)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.L1Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.L1Block) bool); ok {
		r1 = rf(ctx, lastEthBlockSynced)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *entities.L1Block) error); ok {
		r2 = rf(ctx, lastEthBlockSynced)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// L1Syncer_SyncBlocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncBlocks'
type L1Syncer_SyncBlocks_Call struct {
	*mock.Call
}

// SyncBlocks is a helper method to define mock.On call
//   - ctx context.Context
//   - lastEthBlockSynced *entities.L1Block
func (_e *L1Syncer_Expecter) SyncBlocks(ctx interface{}, lastEthBlockSynced interface{}) *L1Syncer_SyncBlocks_Call {
	return &L1Syncer_SyncBlocks_Call{Call: _e.mock.On("SyncBlocks", ctx, lastEthBlockSynced)}
}

func (_c *L1Syncer_SyncBlocks_Call) Run(run func(ctx context.Context, lastEthBlockSynced *entities.L1Block)) *L1Syncer_SyncBlocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.L1Block))
	})
	return _c
}

func (_c *L1Syncer_SyncBlocks_Call) Return(_a0 *entities.L1Block, _a1 bool, _a2 error) *L1Syncer_SyncBlocks_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *L1Syncer_SyncBlocks_Call) RunAndReturn(run func(context.Context, *entities.L1Block) (*entities.L1Block, bool, error)) *L1Syncer_SyncBlocks_Call {
	_c.Call.Return(run)
	return _c
}

// NewL1Syncer creates a new instance of L1Syncer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewL1Syncer(t interface {
	mock.TestingT
	Cleanup(func())
}) *L1Syncer {
	mock := &L1Syncer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
