// Code generated by mockery. DO NOT EDIT.

package mock_l1_check_block

import (
	context "context"

	l1_check_block "github.com/0xPolygonHermez/zkevm-synchronizer-l1/synchronizer/l1_check_block"
	mock "github.com/stretchr/testify/mock"
)

// L1BlockNumberFetcher is an autogenerated mock type for the L1BlockNumberFetcher type
type L1BlockNumberFetcher struct {
	mock.Mock
}

type L1BlockNumberFetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *L1BlockNumberFetcher) EXPECT() *L1BlockNumberFetcher_Expecter {
	return &L1BlockNumberFetcher_Expecter{mock: &_m.Mock}
}

// BlockNumber provides a mock function with given fields: ctx, l1Client
func (_m *L1BlockNumberFetcher) BlockNumber(ctx context.Context, l1Client l1_check_block.L1Requester) (uint64, error) {
	ret := _m.Called(ctx, l1Client)

	if len(ret) == 0 {
		panic("no return value specified for BlockNumber")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, l1_check_block.L1Requester) (uint64, error)); ok {
		return rf(ctx, l1Client)
	}
	if rf, ok := ret.Get(0).(func(context.Context, l1_check_block.L1Requester) uint64); ok {
		r0 = rf(ctx, l1Client)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, l1_check_block.L1Requester) error); ok {
		r1 = rf(ctx, l1Client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// L1BlockNumberFetcher_BlockNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockNumber'
type L1BlockNumberFetcher_BlockNumber_Call struct {
	*mock.Call
}

// BlockNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - l1Client l1_check_block.L1Requester
func (_e *L1BlockNumberFetcher_Expecter) BlockNumber(ctx interface{}, l1Client interface{}) *L1BlockNumberFetcher_BlockNumber_Call {
	return &L1BlockNumberFetcher_BlockNumber_Call{Call: _e.mock.On("BlockNumber", ctx, l1Client)}
}

func (_c *L1BlockNumberFetcher_BlockNumber_Call) Run(run func(ctx context.Context, l1Client l1_check_block.L1Requester)) *L1BlockNumberFetcher_BlockNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(l1_check_block.L1Requester))
	})
	return _c
}

func (_c *L1BlockNumberFetcher_BlockNumber_Call) Return(_a0 uint64, _a1 error) *L1BlockNumberFetcher_BlockNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *L1BlockNumberFetcher_BlockNumber_Call) RunAndReturn(run func(context.Context, l1_check_block.L1Requester) (uint64, error)) *L1BlockNumberFetcher_BlockNumber_Call {
	_c.Call.Return(run)
	return _c
}

// Description provides a mock function with given fields:
func (_m *L1BlockNumberFetcher) Description() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Description")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// L1BlockNumberFetcher_Description_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Description'
type L1BlockNumberFetcher_Description_Call struct {
	*mock.Call
}

// Description is a helper method to define mock.On call
func (_e *L1BlockNumberFetcher_Expecter) Description() *L1BlockNumberFetcher_Description_Call {
	return &L1BlockNumberFetcher_Description_Call{Call: _e.mock.On("Description")}
}

func (_c *L1BlockNumberFetcher_Description_Call) Run(run func()) *L1BlockNumberFetcher_Description_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *L1BlockNumberFetcher_Description_Call) Return(_a0 string) *L1BlockNumberFetcher_Description_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *L1BlockNumberFetcher_Description_Call) RunAndReturn(run func() string) *L1BlockNumberFetcher_Description_Call {
	_c.Call.Return(run)
	return _c
}

// NewL1BlockNumberFetcher creates a new instance of L1BlockNumberFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewL1BlockNumberFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *L1BlockNumberFetcher {
	mock := &L1BlockNumberFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
