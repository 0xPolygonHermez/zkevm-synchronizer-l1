// Code generated by mockery. DO NOT EDIT.

package mock_l1_check_block

import (
	context "context"

	entities "github.com/0xPolygonHermez/zkevm-synchronizer-l1/state/entities"

	mock "github.com/stretchr/testify/mock"
)

// L1BlockCheckerIntegrator is an autogenerated mock type for the L1BlockCheckerIntegrator type
type L1BlockCheckerIntegrator struct {
	mock.Mock
}

type L1BlockCheckerIntegrator_Expecter struct {
	mock *mock.Mock
}

func (_m *L1BlockCheckerIntegrator) EXPECT() *L1BlockCheckerIntegrator_Expecter {
	return &L1BlockCheckerIntegrator_Expecter{mock: &_m.Mock}
}

// CheckReorgWrapper provides a mock function with given fields: ctx, reorgFirstBlockOk, badBlockNumber, errReportedByReorgFunc
func (_m *L1BlockCheckerIntegrator) CheckReorgWrapper(ctx context.Context, reorgFirstBlockOk *entities.L1Block, badBlockNumber uint64, errReportedByReorgFunc error) (*entities.L1Block, uint64, error) {
	ret := _m.Called(ctx, reorgFirstBlockOk, badBlockNumber, errReportedByReorgFunc)

	if len(ret) == 0 {
		panic("no return value specified for CheckReorgWrapper")
	}

	var r0 *entities.L1Block
	var r1 uint64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.L1Block, uint64, error) (*entities.L1Block, uint64, error)); ok {
		return rf(ctx, reorgFirstBlockOk, badBlockNumber, errReportedByReorgFunc)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.L1Block, uint64, error) *entities.L1Block); ok {
		r0 = rf(ctx, reorgFirstBlockOk, badBlockNumber, errReportedByReorgFunc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.L1Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.L1Block, uint64, error) uint64); ok {
		r1 = rf(ctx, reorgFirstBlockOk, badBlockNumber, errReportedByReorgFunc)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *entities.L1Block, uint64, error) error); ok {
		r2 = rf(ctx, reorgFirstBlockOk, badBlockNumber, errReportedByReorgFunc)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// L1BlockCheckerIntegrator_CheckReorgWrapper_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckReorgWrapper'
type L1BlockCheckerIntegrator_CheckReorgWrapper_Call struct {
	*mock.Call
}

// CheckReorgWrapper is a helper method to define mock.On call
//   - ctx context.Context
//   - reorgFirstBlockOk *entities.L1Block
//   - badBlockNumber uint64
//   - errReportedByReorgFunc error
func (_e *L1BlockCheckerIntegrator_Expecter) CheckReorgWrapper(ctx interface{}, reorgFirstBlockOk interface{}, badBlockNumber interface{}, errReportedByReorgFunc interface{}) *L1BlockCheckerIntegrator_CheckReorgWrapper_Call {
	return &L1BlockCheckerIntegrator_CheckReorgWrapper_Call{Call: _e.mock.On("CheckReorgWrapper", ctx, reorgFirstBlockOk, badBlockNumber, errReportedByReorgFunc)}
}

func (_c *L1BlockCheckerIntegrator_CheckReorgWrapper_Call) Run(run func(ctx context.Context, reorgFirstBlockOk *entities.L1Block, badBlockNumber uint64, errReportedByReorgFunc error)) *L1BlockCheckerIntegrator_CheckReorgWrapper_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.L1Block), args[2].(uint64), args[3].(error))
	})
	return _c
}

func (_c *L1BlockCheckerIntegrator_CheckReorgWrapper_Call) Return(_a0 *entities.L1Block, _a1 uint64, _a2 error) *L1BlockCheckerIntegrator_CheckReorgWrapper_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *L1BlockCheckerIntegrator_CheckReorgWrapper_Call) RunAndReturn(run func(context.Context, *entities.L1Block, uint64, error) (*entities.L1Block, uint64, error)) *L1BlockCheckerIntegrator_CheckReorgWrapper_Call {
	_c.Call.Return(run)
	return _c
}

// OnResetState provides a mock function with given fields: ctx
func (_m *L1BlockCheckerIntegrator) OnResetState(ctx context.Context) {
	_m.Called(ctx)
}

// L1BlockCheckerIntegrator_OnResetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnResetState'
type L1BlockCheckerIntegrator_OnResetState_Call struct {
	*mock.Call
}

// OnResetState is a helper method to define mock.On call
//   - ctx context.Context
func (_e *L1BlockCheckerIntegrator_Expecter) OnResetState(ctx interface{}) *L1BlockCheckerIntegrator_OnResetState_Call {
	return &L1BlockCheckerIntegrator_OnResetState_Call{Call: _e.mock.On("OnResetState", ctx)}
}

func (_c *L1BlockCheckerIntegrator_OnResetState_Call) Run(run func(ctx context.Context)) *L1BlockCheckerIntegrator_OnResetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *L1BlockCheckerIntegrator_OnResetState_Call) Return() *L1BlockCheckerIntegrator_OnResetState_Call {
	_c.Call.Return()
	return _c
}

func (_c *L1BlockCheckerIntegrator_OnResetState_Call) RunAndReturn(run func(context.Context)) *L1BlockCheckerIntegrator_OnResetState_Call {
	_c.Call.Return(run)
	return _c
}

// OnStart provides a mock function with given fields: ctx
func (_m *L1BlockCheckerIntegrator) OnStart(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for OnStart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// L1BlockCheckerIntegrator_OnStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnStart'
type L1BlockCheckerIntegrator_OnStart_Call struct {
	*mock.Call
}

// OnStart is a helper method to define mock.On call
//   - ctx context.Context
func (_e *L1BlockCheckerIntegrator_Expecter) OnStart(ctx interface{}) *L1BlockCheckerIntegrator_OnStart_Call {
	return &L1BlockCheckerIntegrator_OnStart_Call{Call: _e.mock.On("OnStart", ctx)}
}

func (_c *L1BlockCheckerIntegrator_OnStart_Call) Run(run func(ctx context.Context)) *L1BlockCheckerIntegrator_OnStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *L1BlockCheckerIntegrator_OnStart_Call) Return(_a0 error) *L1BlockCheckerIntegrator_OnStart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *L1BlockCheckerIntegrator_OnStart_Call) RunAndReturn(run func(context.Context) error) *L1BlockCheckerIntegrator_OnStart_Call {
	_c.Call.Return(run)
	return _c
}

// NewL1BlockCheckerIntegrator creates a new instance of L1BlockCheckerIntegrator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewL1BlockCheckerIntegrator(t interface {
	mock.TestingT
	Cleanup(func())
}) *L1BlockCheckerIntegrator {
	mock := &L1BlockCheckerIntegrator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
