// Code generated by mockery. DO NOT EDIT.

package mock_dataavailability

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/0xPolygon/cdk-data-availability/types"
)

// DACClientMock is an autogenerated mock type for the Client type
type DACClientMock struct {
	mock.Mock
}

type DACClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *DACClientMock) EXPECT() *DACClientMock_Expecter {
	return &DACClientMock_Expecter{mock: &_m.Mock}
}

// GetOffChainData provides a mock function with given fields: ctx, hash
func (_m *DACClientMock) GetOffChainData(ctx context.Context, hash common.Hash) ([]byte, error) {
	ret := _m.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for GetOffChainData")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) ([]byte, error)); ok {
		return rf(ctx, hash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) []byte); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Hash) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DACClientMock_GetOffChainData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOffChainData'
type DACClientMock_GetOffChainData_Call struct {
	*mock.Call
}

// GetOffChainData is a helper method to define mock.On call
//   - ctx context.Context
//   - hash common.Hash
func (_e *DACClientMock_Expecter) GetOffChainData(ctx interface{}, hash interface{}) *DACClientMock_GetOffChainData_Call {
	return &DACClientMock_GetOffChainData_Call{Call: _e.mock.On("GetOffChainData", ctx, hash)}
}

func (_c *DACClientMock_GetOffChainData_Call) Run(run func(ctx context.Context, hash common.Hash)) *DACClientMock_GetOffChainData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash))
	})
	return _c
}

func (_c *DACClientMock_GetOffChainData_Call) Return(_a0 []byte, _a1 error) *DACClientMock_GetOffChainData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DACClientMock_GetOffChainData_Call) RunAndReturn(run func(context.Context, common.Hash) ([]byte, error)) *DACClientMock_GetOffChainData_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatus provides a mock function with given fields: ctx
func (_m *DACClientMock) GetStatus(ctx context.Context) (*types.DACStatus, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetStatus")
	}

	var r0 *types.DACStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*types.DACStatus, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *types.DACStatus); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.DACStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DACClientMock_GetStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatus'
type DACClientMock_GetStatus_Call struct {
	*mock.Call
}

// GetStatus is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DACClientMock_Expecter) GetStatus(ctx interface{}) *DACClientMock_GetStatus_Call {
	return &DACClientMock_GetStatus_Call{Call: _e.mock.On("GetStatus", ctx)}
}

func (_c *DACClientMock_GetStatus_Call) Run(run func(ctx context.Context)) *DACClientMock_GetStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DACClientMock_GetStatus_Call) Return(_a0 *types.DACStatus, _a1 error) *DACClientMock_GetStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DACClientMock_GetStatus_Call) RunAndReturn(run func(context.Context) (*types.DACStatus, error)) *DACClientMock_GetStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ListOffChainData provides a mock function with given fields: ctx, hashes
func (_m *DACClientMock) ListOffChainData(ctx context.Context, hashes []common.Hash) (map[common.Hash][]byte, error) {
	ret := _m.Called(ctx, hashes)

	if len(ret) == 0 {
		panic("no return value specified for ListOffChainData")
	}

	var r0 map[common.Hash][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []common.Hash) (map[common.Hash][]byte, error)); ok {
		return rf(ctx, hashes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []common.Hash) map[common.Hash][]byte); ok {
		r0 = rf(ctx, hashes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[common.Hash][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []common.Hash) error); ok {
		r1 = rf(ctx, hashes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DACClientMock_ListOffChainData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOffChainData'
type DACClientMock_ListOffChainData_Call struct {
	*mock.Call
}

// ListOffChainData is a helper method to define mock.On call
//   - ctx context.Context
//   - hashes []common.Hash
func (_e *DACClientMock_Expecter) ListOffChainData(ctx interface{}, hashes interface{}) *DACClientMock_ListOffChainData_Call {
	return &DACClientMock_ListOffChainData_Call{Call: _e.mock.On("ListOffChainData", ctx, hashes)}
}

func (_c *DACClientMock_ListOffChainData_Call) Run(run func(ctx context.Context, hashes []common.Hash)) *DACClientMock_ListOffChainData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]common.Hash))
	})
	return _c
}

func (_c *DACClientMock_ListOffChainData_Call) Return(_a0 map[common.Hash][]byte, _a1 error) *DACClientMock_ListOffChainData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DACClientMock_ListOffChainData_Call) RunAndReturn(run func(context.Context, []common.Hash) (map[common.Hash][]byte, error)) *DACClientMock_ListOffChainData_Call {
	_c.Call.Return(run)
	return _c
}

// SignSequence provides a mock function with given fields: ctx, signedSequence
func (_m *DACClientMock) SignSequence(ctx context.Context, signedSequence types.SignedSequence) ([]byte, error) {
	ret := _m.Called(ctx, signedSequence)

	if len(ret) == 0 {
		panic("no return value specified for SignSequence")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.SignedSequence) ([]byte, error)); ok {
		return rf(ctx, signedSequence)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.SignedSequence) []byte); ok {
		r0 = rf(ctx, signedSequence)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.SignedSequence) error); ok {
		r1 = rf(ctx, signedSequence)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DACClientMock_SignSequence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignSequence'
type DACClientMock_SignSequence_Call struct {
	*mock.Call
}

// SignSequence is a helper method to define mock.On call
//   - ctx context.Context
//   - signedSequence types.SignedSequence
func (_e *DACClientMock_Expecter) SignSequence(ctx interface{}, signedSequence interface{}) *DACClientMock_SignSequence_Call {
	return &DACClientMock_SignSequence_Call{Call: _e.mock.On("SignSequence", ctx, signedSequence)}
}

func (_c *DACClientMock_SignSequence_Call) Run(run func(ctx context.Context, signedSequence types.SignedSequence)) *DACClientMock_SignSequence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.SignedSequence))
	})
	return _c
}

func (_c *DACClientMock_SignSequence_Call) Return(_a0 []byte, _a1 error) *DACClientMock_SignSequence_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DACClientMock_SignSequence_Call) RunAndReturn(run func(context.Context, types.SignedSequence) ([]byte, error)) *DACClientMock_SignSequence_Call {
	_c.Call.Return(run)
	return _c
}

// SignSequenceBanana provides a mock function with given fields: ctx, signedSequence
func (_m *DACClientMock) SignSequenceBanana(ctx context.Context, signedSequence types.SignedSequenceBanana) ([]byte, error) {
	ret := _m.Called(ctx, signedSequence)

	if len(ret) == 0 {
		panic("no return value specified for SignSequenceBanana")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.SignedSequenceBanana) ([]byte, error)); ok {
		return rf(ctx, signedSequence)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.SignedSequenceBanana) []byte); ok {
		r0 = rf(ctx, signedSequence)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.SignedSequenceBanana) error); ok {
		r1 = rf(ctx, signedSequence)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DACClientMock_SignSequenceBanana_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignSequenceBanana'
type DACClientMock_SignSequenceBanana_Call struct {
	*mock.Call
}

// SignSequenceBanana is a helper method to define mock.On call
//   - ctx context.Context
//   - signedSequence types.SignedSequenceBanana
func (_e *DACClientMock_Expecter) SignSequenceBanana(ctx interface{}, signedSequence interface{}) *DACClientMock_SignSequenceBanana_Call {
	return &DACClientMock_SignSequenceBanana_Call{Call: _e.mock.On("SignSequenceBanana", ctx, signedSequence)}
}

func (_c *DACClientMock_SignSequenceBanana_Call) Run(run func(ctx context.Context, signedSequence types.SignedSequenceBanana)) *DACClientMock_SignSequenceBanana_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.SignedSequenceBanana))
	})
	return _c
}

func (_c *DACClientMock_SignSequenceBanana_Call) Return(_a0 []byte, _a1 error) *DACClientMock_SignSequenceBanana_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DACClientMock_SignSequenceBanana_Call) RunAndReturn(run func(context.Context, types.SignedSequenceBanana) ([]byte, error)) *DACClientMock_SignSequenceBanana_Call {
	_c.Call.Return(run)
	return _c
}

// NewDACClientMock creates a new instance of DACClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDACClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *DACClientMock {
	mock := &DACClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
