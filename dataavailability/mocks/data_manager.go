// Code generated by mockery. DO NOT EDIT.

package mock_dataavailability

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	dataavailability "github.com/0xPolygonHermez/zkevm-synchronizer-l1/dataavailability"

	mock "github.com/stretchr/testify/mock"
)

// DataManager is an autogenerated mock type for the DataManager type
type DataManager struct {
	mock.Mock
}

type DataManager_Expecter struct {
	mock *mock.Mock
}

func (_m *DataManager) EXPECT() *DataManager_Expecter {
	return &DataManager_Expecter{mock: &_m.Mock}
}

// GetBatchL2Data provides a mock function with given fields: batchNum, batchHashes, dataAvailabilityMessage
func (_m *DataManager) GetBatchL2Data(batchNum []uint64, batchHashes []common.Hash, dataAvailabilityMessage []byte) ([]dataavailability.BatchL2Data, error) {
	ret := _m.Called(batchNum, batchHashes, dataAvailabilityMessage)

	if len(ret) == 0 {
		panic("no return value specified for GetBatchL2Data")
	}

	var r0 []dataavailability.BatchL2Data
	var r1 error
	if rf, ok := ret.Get(0).(func([]uint64, []common.Hash, []byte) ([]dataavailability.BatchL2Data, error)); ok {
		return rf(batchNum, batchHashes, dataAvailabilityMessage)
	}
	if rf, ok := ret.Get(0).(func([]uint64, []common.Hash, []byte) []dataavailability.BatchL2Data); ok {
		r0 = rf(batchNum, batchHashes, dataAvailabilityMessage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dataavailability.BatchL2Data)
		}
	}

	if rf, ok := ret.Get(1).(func([]uint64, []common.Hash, []byte) error); ok {
		r1 = rf(batchNum, batchHashes, dataAvailabilityMessage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataManager_GetBatchL2Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBatchL2Data'
type DataManager_GetBatchL2Data_Call struct {
	*mock.Call
}

// GetBatchL2Data is a helper method to define mock.On call
//   - batchNum []uint64
//   - batchHashes []common.Hash
//   - dataAvailabilityMessage []byte
func (_e *DataManager_Expecter) GetBatchL2Data(batchNum interface{}, batchHashes interface{}, dataAvailabilityMessage interface{}) *DataManager_GetBatchL2Data_Call {
	return &DataManager_GetBatchL2Data_Call{Call: _e.mock.On("GetBatchL2Data", batchNum, batchHashes, dataAvailabilityMessage)}
}

func (_c *DataManager_GetBatchL2Data_Call) Run(run func(batchNum []uint64, batchHashes []common.Hash, dataAvailabilityMessage []byte)) *DataManager_GetBatchL2Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]uint64), args[1].([]common.Hash), args[2].([]byte))
	})
	return _c
}

func (_c *DataManager_GetBatchL2Data_Call) Return(_a0 []dataavailability.BatchL2Data, _a1 error) *DataManager_GetBatchL2Data_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataManager_GetBatchL2Data_Call) RunAndReturn(run func([]uint64, []common.Hash, []byte) ([]dataavailability.BatchL2Data, error)) *DataManager_GetBatchL2Data_Call {
	_c.Call.Return(run)
	return _c
}

// PostSequence provides a mock function with given fields: ctx, batchesData
func (_m *DataManager) PostSequence(ctx context.Context, batchesData [][]byte) ([]byte, error) {
	ret := _m.Called(ctx, batchesData)

	if len(ret) == 0 {
		panic("no return value specified for PostSequence")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte) ([]byte, error)); ok {
		return rf(ctx, batchesData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte) []byte); ok {
		r0 = rf(ctx, batchesData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, [][]byte) error); ok {
		r1 = rf(ctx, batchesData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataManager_PostSequence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostSequence'
type DataManager_PostSequence_Call struct {
	*mock.Call
}

// PostSequence is a helper method to define mock.On call
//   - ctx context.Context
//   - batchesData [][]byte
func (_e *DataManager_Expecter) PostSequence(ctx interface{}, batchesData interface{}) *DataManager_PostSequence_Call {
	return &DataManager_PostSequence_Call{Call: _e.mock.On("PostSequence", ctx, batchesData)}
}

func (_c *DataManager_PostSequence_Call) Run(run func(ctx context.Context, batchesData [][]byte)) *DataManager_PostSequence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([][]byte))
	})
	return _c
}

func (_c *DataManager_PostSequence_Call) Return(_a0 []byte, _a1 error) *DataManager_PostSequence_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataManager_PostSequence_Call) RunAndReturn(run func(context.Context, [][]byte) ([]byte, error)) *DataManager_PostSequence_Call {
	_c.Call.Return(run)
	return _c
}

// NewDataManager creates a new instance of DataManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataManager {
	mock := &DataManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
