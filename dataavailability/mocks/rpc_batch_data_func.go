// Code generated by mockery. DO NOT EDIT.

package mock_dataavailability

import (
	context "context"
	big "math/big"

	mock "github.com/stretchr/testify/mock"

	types "github.com/0xPolygonHermez/zkevm-synchronizer-l1/jsonrpcclient/types"
)

// rpcBatchDataFunc is an autogenerated mock type for the rpcBatchDataFunc type
type rpcBatchDataFunc struct {
	mock.Mock
}

type rpcBatchDataFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *rpcBatchDataFunc) EXPECT() *rpcBatchDataFunc_Expecter {
	return &rpcBatchDataFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, numbers
func (_m *rpcBatchDataFunc) Execute(ctx context.Context, numbers []*big.Int) ([]*types.BatchData, error) {
	ret := _m.Called(ctx, numbers)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 []*types.BatchData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*big.Int) ([]*types.BatchData, error)); ok {
		return rf(ctx, numbers)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*big.Int) []*types.BatchData); ok {
		r0 = rf(ctx, numbers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.BatchData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*big.Int) error); ok {
		r1 = rf(ctx, numbers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// rpcBatchDataFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type rpcBatchDataFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - numbers []*big.Int
func (_e *rpcBatchDataFunc_Expecter) Execute(ctx interface{}, numbers interface{}) *rpcBatchDataFunc_Execute_Call {
	return &rpcBatchDataFunc_Execute_Call{Call: _e.mock.On("Execute", ctx, numbers)}
}

func (_c *rpcBatchDataFunc_Execute_Call) Run(run func(ctx context.Context, numbers []*big.Int)) *rpcBatchDataFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*big.Int))
	})
	return _c
}

func (_c *rpcBatchDataFunc_Execute_Call) Return(_a0 []*types.BatchData, _a1 error) *rpcBatchDataFunc_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *rpcBatchDataFunc_Execute_Call) RunAndReturn(run func(context.Context, []*big.Int) ([]*types.BatchData, error)) *rpcBatchDataFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// newRpcBatchDataFunc creates a new instance of rpcBatchDataFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newRpcBatchDataFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *rpcBatchDataFunc {
	mock := &rpcBatchDataFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
