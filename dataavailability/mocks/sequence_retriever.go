// Code generated by mockery. DO NOT EDIT.

package mock_dataavailability

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"
)

// SequenceRetriever is an autogenerated mock type for the SequenceRetriever type
type SequenceRetriever struct {
	mock.Mock
}

type SequenceRetriever_Expecter struct {
	mock *mock.Mock
}

func (_m *SequenceRetriever) EXPECT() *SequenceRetriever_Expecter {
	return &SequenceRetriever_Expecter{mock: &_m.Mock}
}

// GetSequence provides a mock function with given fields: ctx, batchHashes, dataAvailabilityMessage
func (_m *SequenceRetriever) GetSequence(ctx context.Context, batchHashes []common.Hash, dataAvailabilityMessage []byte) ([][]byte, error) {
	ret := _m.Called(ctx, batchHashes, dataAvailabilityMessage)

	if len(ret) == 0 {
		panic("no return value specified for GetSequence")
	}

	var r0 [][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []common.Hash, []byte) ([][]byte, error)); ok {
		return rf(ctx, batchHashes, dataAvailabilityMessage)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []common.Hash, []byte) [][]byte); ok {
		r0 = rf(ctx, batchHashes, dataAvailabilityMessage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []common.Hash, []byte) error); ok {
		r1 = rf(ctx, batchHashes, dataAvailabilityMessage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SequenceRetriever_GetSequence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSequence'
type SequenceRetriever_GetSequence_Call struct {
	*mock.Call
}

// GetSequence is a helper method to define mock.On call
//   - ctx context.Context
//   - batchHashes []common.Hash
//   - dataAvailabilityMessage []byte
func (_e *SequenceRetriever_Expecter) GetSequence(ctx interface{}, batchHashes interface{}, dataAvailabilityMessage interface{}) *SequenceRetriever_GetSequence_Call {
	return &SequenceRetriever_GetSequence_Call{Call: _e.mock.On("GetSequence", ctx, batchHashes, dataAvailabilityMessage)}
}

func (_c *SequenceRetriever_GetSequence_Call) Run(run func(ctx context.Context, batchHashes []common.Hash, dataAvailabilityMessage []byte)) *SequenceRetriever_GetSequence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]common.Hash), args[2].([]byte))
	})
	return _c
}

func (_c *SequenceRetriever_GetSequence_Call) Return(_a0 [][]byte, _a1 error) *SequenceRetriever_GetSequence_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SequenceRetriever_GetSequence_Call) RunAndReturn(run func(context.Context, []common.Hash, []byte) ([][]byte, error)) *SequenceRetriever_GetSequence_Call {
	_c.Call.Return(run)
	return _c
}

// NewSequenceRetriever creates a new instance of SequenceRetriever. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSequenceRetriever(t interface {
	mock.TestingT
	Cleanup(func())
}) *SequenceRetriever {
	mock := &SequenceRetriever{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
