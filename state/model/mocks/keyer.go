// Code generated by mockery. DO NOT EDIT.

package mock_model

import mock "github.com/stretchr/testify/mock"

// Keyer is an autogenerated mock type for the Keyer type
type Keyer struct {
	mock.Mock
}

type Keyer_Expecter struct {
	mock *mock.Mock
}

func (_m *Keyer) EXPECT() *Keyer_Expecter {
	return &Keyer_Expecter{mock: &_m.Mock}
}

// IsEqual provides a mock function with given fields: other
func (_m *Keyer) IsEqual(other interface{}) bool {
	ret := _m.Called(other)

	if len(ret) == 0 {
		panic("no return value specified for IsEqual")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}) bool); ok {
		r0 = rf(other)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Keyer_IsEqual_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEqual'
type Keyer_IsEqual_Call struct {
	*mock.Call
}

// IsEqual is a helper method to define mock.On call
//   - other interface{}
func (_e *Keyer_Expecter) IsEqual(other interface{}) *Keyer_IsEqual_Call {
	return &Keyer_IsEqual_Call{Call: _e.mock.On("IsEqual", other)}
}

func (_c *Keyer_IsEqual_Call) Run(run func(other interface{})) *Keyer_IsEqual_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Keyer_IsEqual_Call) Return(_a0 bool) *Keyer_IsEqual_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Keyer_IsEqual_Call) RunAndReturn(run func(interface{}) bool) *Keyer_IsEqual_Call {
	_c.Call.Return(run)
	return _c
}

// Key provides a mock function with given fields:
func (_m *Keyer) Key() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Key")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Keyer_Key_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Key'
type Keyer_Key_Call struct {
	*mock.Call
}

// Key is a helper method to define mock.On call
func (_e *Keyer_Expecter) Key() *Keyer_Key_Call {
	return &Keyer_Key_Call{Call: _e.mock.On("Key")}
}

func (_c *Keyer_Key_Call) Run(run func()) *Keyer_Key_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Keyer_Key_Call) Return(_a0 uint64) *Keyer_Key_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Keyer_Key_Call) RunAndReturn(run func() uint64) *Keyer_Key_Call {
	_c.Call.Return(run)
	return _c
}

// NewKeyer creates a new instance of Keyer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeyer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Keyer {
	mock := &Keyer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
