// Code generated by mockery. DO NOT EDIT.

package mock_model

import (
	context "context"

	entities "github.com/0xPolygonHermez/zkevm-synchronizer-l1/state/entities"
	mock "github.com/stretchr/testify/mock"
)

// storageTxManager is an autogenerated mock type for the storageTxManager type
type storageTxManager struct {
	mock.Mock
}

type storageTxManager_Expecter struct {
	mock *mock.Mock
}

func (_m *storageTxManager) EXPECT() *storageTxManager_Expecter {
	return &storageTxManager_Expecter{mock: &_m.Mock}
}

// BeginTransaction provides a mock function with given fields: ctx
func (_m *storageTxManager) BeginTransaction(ctx context.Context) (entities.Tx, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTransaction")
	}

	var r0 entities.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (entities.Tx, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) entities.Tx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entities.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// storageTxManager_BeginTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTransaction'
type storageTxManager_BeginTransaction_Call struct {
	*mock.Call
}

// BeginTransaction is a helper method to define mock.On call
//   - ctx context.Context
func (_e *storageTxManager_Expecter) BeginTransaction(ctx interface{}) *storageTxManager_BeginTransaction_Call {
	return &storageTxManager_BeginTransaction_Call{Call: _e.mock.On("BeginTransaction", ctx)}
}

func (_c *storageTxManager_BeginTransaction_Call) Run(run func(ctx context.Context)) *storageTxManager_BeginTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *storageTxManager_BeginTransaction_Call) Return(_a0 entities.Tx, _a1 error) *storageTxManager_BeginTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *storageTxManager_BeginTransaction_Call) RunAndReturn(run func(context.Context) (entities.Tx, error)) *storageTxManager_BeginTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// newStorageTxManager creates a new instance of storageTxManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newStorageTxManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *storageTxManager {
	mock := &storageTxManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
