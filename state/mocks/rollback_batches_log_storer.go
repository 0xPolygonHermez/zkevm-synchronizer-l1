// Code generated by mockery. DO NOT EDIT.

package mock_state

import (
	context "context"

	entities "github.com/0xPolygonHermez/zkevm-synchronizer-l1/state/entities"
	mock "github.com/stretchr/testify/mock"
)

// rollbackBatchesLogStorer is an autogenerated mock type for the rollbackBatchesLogStorer type
type rollbackBatchesLogStorer struct {
	mock.Mock
}

type rollbackBatchesLogStorer_Expecter struct {
	mock *mock.Mock
}

func (_m *rollbackBatchesLogStorer) EXPECT() *rollbackBatchesLogStorer_Expecter {
	return &rollbackBatchesLogStorer_Expecter{mock: &_m.Mock}
}

// AddRollbackBatchesLogEntry provides a mock function with given fields: ctx, entry, dbTx
func (_m *rollbackBatchesLogStorer) AddRollbackBatchesLogEntry(ctx context.Context, entry *entities.RollbackBatchesLogEntry, dbTx entities.Tx) error {
	ret := _m.Called(ctx, entry, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for AddRollbackBatchesLogEntry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.RollbackBatchesLogEntry, entities.Tx) error); ok {
		r0 = rf(ctx, entry, dbTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// rollbackBatchesLogStorer_AddRollbackBatchesLogEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRollbackBatchesLogEntry'
type rollbackBatchesLogStorer_AddRollbackBatchesLogEntry_Call struct {
	*mock.Call
}

// AddRollbackBatchesLogEntry is a helper method to define mock.On call
//   - ctx context.Context
//   - entry *entities.RollbackBatchesLogEntry
//   - dbTx entities.Tx
func (_e *rollbackBatchesLogStorer_Expecter) AddRollbackBatchesLogEntry(ctx interface{}, entry interface{}, dbTx interface{}) *rollbackBatchesLogStorer_AddRollbackBatchesLogEntry_Call {
	return &rollbackBatchesLogStorer_AddRollbackBatchesLogEntry_Call{Call: _e.mock.On("AddRollbackBatchesLogEntry", ctx, entry, dbTx)}
}

func (_c *rollbackBatchesLogStorer_AddRollbackBatchesLogEntry_Call) Run(run func(ctx context.Context, entry *entities.RollbackBatchesLogEntry, dbTx entities.Tx)) *rollbackBatchesLogStorer_AddRollbackBatchesLogEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.RollbackBatchesLogEntry), args[2].(entities.Tx))
	})
	return _c
}

func (_c *rollbackBatchesLogStorer_AddRollbackBatchesLogEntry_Call) Return(_a0 error) *rollbackBatchesLogStorer_AddRollbackBatchesLogEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *rollbackBatchesLogStorer_AddRollbackBatchesLogEntry_Call) RunAndReturn(run func(context.Context, *entities.RollbackBatchesLogEntry, entities.Tx) error) *rollbackBatchesLogStorer_AddRollbackBatchesLogEntry_Call {
	_c.Call.Return(run)
	return _c
}

// GetRollbackBatchesLogEntryGreaterOrEqualL1BlockNumber provides a mock function with given fields: ctx, l1BlockNumber, dbTx
func (_m *rollbackBatchesLogStorer) GetRollbackBatchesLogEntryGreaterOrEqualL1BlockNumber(ctx context.Context, l1BlockNumber uint64, dbTx entities.Tx) ([]entities.RollbackBatchesLogEntry, error) {
	ret := _m.Called(ctx, l1BlockNumber, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for GetRollbackBatchesLogEntryGreaterOrEqualL1BlockNumber")
	}

	var r0 []entities.RollbackBatchesLogEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, entities.Tx) ([]entities.RollbackBatchesLogEntry, error)); ok {
		return rf(ctx, l1BlockNumber, dbTx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, entities.Tx) []entities.RollbackBatchesLogEntry); ok {
		r0 = rf(ctx, l1BlockNumber, dbTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.RollbackBatchesLogEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, entities.Tx) error); ok {
		r1 = rf(ctx, l1BlockNumber, dbTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// rollbackBatchesLogStorer_GetRollbackBatchesLogEntryGreaterOrEqualL1BlockNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRollbackBatchesLogEntryGreaterOrEqualL1BlockNumber'
type rollbackBatchesLogStorer_GetRollbackBatchesLogEntryGreaterOrEqualL1BlockNumber_Call struct {
	*mock.Call
}

// GetRollbackBatchesLogEntryGreaterOrEqualL1BlockNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - l1BlockNumber uint64
//   - dbTx entities.Tx
func (_e *rollbackBatchesLogStorer_Expecter) GetRollbackBatchesLogEntryGreaterOrEqualL1BlockNumber(ctx interface{}, l1BlockNumber interface{}, dbTx interface{}) *rollbackBatchesLogStorer_GetRollbackBatchesLogEntryGreaterOrEqualL1BlockNumber_Call {
	return &rollbackBatchesLogStorer_GetRollbackBatchesLogEntryGreaterOrEqualL1BlockNumber_Call{Call: _e.mock.On("GetRollbackBatchesLogEntryGreaterOrEqualL1BlockNumber", ctx, l1BlockNumber, dbTx)}
}

func (_c *rollbackBatchesLogStorer_GetRollbackBatchesLogEntryGreaterOrEqualL1BlockNumber_Call) Run(run func(ctx context.Context, l1BlockNumber uint64, dbTx entities.Tx)) *rollbackBatchesLogStorer_GetRollbackBatchesLogEntryGreaterOrEqualL1BlockNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(entities.Tx))
	})
	return _c
}

func (_c *rollbackBatchesLogStorer_GetRollbackBatchesLogEntryGreaterOrEqualL1BlockNumber_Call) Return(_a0 []entities.RollbackBatchesLogEntry, _a1 error) *rollbackBatchesLogStorer_GetRollbackBatchesLogEntryGreaterOrEqualL1BlockNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *rollbackBatchesLogStorer_GetRollbackBatchesLogEntryGreaterOrEqualL1BlockNumber_Call) RunAndReturn(run func(context.Context, uint64, entities.Tx) ([]entities.RollbackBatchesLogEntry, error)) *rollbackBatchesLogStorer_GetRollbackBatchesLogEntryGreaterOrEqualL1BlockNumber_Call {
	_c.Call.Return(run)
	return _c
}

// newRollbackBatchesLogStorer creates a new instance of rollbackBatchesLogStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newRollbackBatchesLogStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *rollbackBatchesLogStorer {
	mock := &rollbackBatchesLogStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
