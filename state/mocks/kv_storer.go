// Code generated by mockery. DO NOT EDIT.

package mock_state

import (
	context "context"

	entities "github.com/0xPolygonHermez/zkevm-synchronizer-l1/state/entities"
	mock "github.com/stretchr/testify/mock"
)

// KvStorer is an autogenerated mock type for the KvStorer type
type KvStorer struct {
	mock.Mock
}

type KvStorer_Expecter struct {
	mock *mock.Mock
}

func (_m *KvStorer) EXPECT() *KvStorer_Expecter {
	return &KvStorer_Expecter{mock: &_m.Mock}
}

// KVGetJson provides a mock function with given fields: ctx, key, value, metadata, dbTx
func (_m *KvStorer) KVGetJson(ctx context.Context, key string, value interface{}, metadata *entities.KVMetadataEntry, dbTx entities.Tx) error {
	ret := _m.Called(ctx, key, value, metadata, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for KVGetJson")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, *entities.KVMetadataEntry, entities.Tx) error); ok {
		r0 = rf(ctx, key, value, metadata, dbTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KvStorer_KVGetJson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KVGetJson'
type KvStorer_KVGetJson_Call struct {
	*mock.Call
}

// KVGetJson is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value interface{}
//   - metadata *entities.KVMetadataEntry
//   - dbTx entities.Tx
func (_e *KvStorer_Expecter) KVGetJson(ctx interface{}, key interface{}, value interface{}, metadata interface{}, dbTx interface{}) *KvStorer_KVGetJson_Call {
	return &KvStorer_KVGetJson_Call{Call: _e.mock.On("KVGetJson", ctx, key, value, metadata, dbTx)}
}

func (_c *KvStorer_KVGetJson_Call) Run(run func(ctx context.Context, key string, value interface{}, metadata *entities.KVMetadataEntry, dbTx entities.Tx)) *KvStorer_KVGetJson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(*entities.KVMetadataEntry), args[4].(entities.Tx))
	})
	return _c
}

func (_c *KvStorer_KVGetJson_Call) Return(_a0 error) *KvStorer_KVGetJson_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KvStorer_KVGetJson_Call) RunAndReturn(run func(context.Context, string, interface{}, *entities.KVMetadataEntry, entities.Tx) error) *KvStorer_KVGetJson_Call {
	_c.Call.Return(run)
	return _c
}

// KVSetJson provides a mock function with given fields: ctx, key, value, metadata, dbTx
func (_m *KvStorer) KVSetJson(ctx context.Context, key string, value interface{}, metadata *entities.KVMetadataEntry, dbTx entities.Tx) error {
	ret := _m.Called(ctx, key, value, metadata, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for KVSetJson")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, *entities.KVMetadataEntry, entities.Tx) error); ok {
		r0 = rf(ctx, key, value, metadata, dbTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KvStorer_KVSetJson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KVSetJson'
type KvStorer_KVSetJson_Call struct {
	*mock.Call
}

// KVSetJson is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value interface{}
//   - metadata *entities.KVMetadataEntry
//   - dbTx entities.Tx
func (_e *KvStorer_Expecter) KVSetJson(ctx interface{}, key interface{}, value interface{}, metadata interface{}, dbTx interface{}) *KvStorer_KVSetJson_Call {
	return &KvStorer_KVSetJson_Call{Call: _e.mock.On("KVSetJson", ctx, key, value, metadata, dbTx)}
}

func (_c *KvStorer_KVSetJson_Call) Run(run func(ctx context.Context, key string, value interface{}, metadata *entities.KVMetadataEntry, dbTx entities.Tx)) *KvStorer_KVSetJson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(*entities.KVMetadataEntry), args[4].(entities.Tx))
	})
	return _c
}

func (_c *KvStorer_KVSetJson_Call) Return(_a0 error) *KvStorer_KVSetJson_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KvStorer_KVSetJson_Call) RunAndReturn(run func(context.Context, string, interface{}, *entities.KVMetadataEntry, entities.Tx) error) *KvStorer_KVSetJson_Call {
	_c.Call.Return(run)
	return _c
}

// NewKvStorer creates a new instance of KvStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKvStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *KvStorer {
	mock := &KvStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
