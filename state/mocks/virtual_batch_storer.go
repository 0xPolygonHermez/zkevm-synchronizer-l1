// Code generated by mockery. DO NOT EDIT.

package mock_state

import (
	context "context"

	entities "github.com/0xPolygonHermez/zkevm-synchronizer-l1/state/entities"
	mock "github.com/stretchr/testify/mock"
)

// virtualBatchStorer is an autogenerated mock type for the virtualBatchStorer type
type virtualBatchStorer struct {
	mock.Mock
}

type virtualBatchStorer_Expecter struct {
	mock *mock.Mock
}

func (_m *virtualBatchStorer) EXPECT() *virtualBatchStorer_Expecter {
	return &virtualBatchStorer_Expecter{mock: &_m.Mock}
}

// AddVirtualBatch provides a mock function with given fields: ctx, virtualBatch, dbTx
func (_m *virtualBatchStorer) AddVirtualBatch(ctx context.Context, virtualBatch *entities.VirtualBatch, dbTx entities.Tx) error {
	ret := _m.Called(ctx, virtualBatch, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for AddVirtualBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.VirtualBatch, entities.Tx) error); ok {
		r0 = rf(ctx, virtualBatch, dbTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// virtualBatchStorer_AddVirtualBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddVirtualBatch'
type virtualBatchStorer_AddVirtualBatch_Call struct {
	*mock.Call
}

// AddVirtualBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - virtualBatch *entities.VirtualBatch
//   - dbTx entities.Tx
func (_e *virtualBatchStorer_Expecter) AddVirtualBatch(ctx interface{}, virtualBatch interface{}, dbTx interface{}) *virtualBatchStorer_AddVirtualBatch_Call {
	return &virtualBatchStorer_AddVirtualBatch_Call{Call: _e.mock.On("AddVirtualBatch", ctx, virtualBatch, dbTx)}
}

func (_c *virtualBatchStorer_AddVirtualBatch_Call) Run(run func(ctx context.Context, virtualBatch *entities.VirtualBatch, dbTx entities.Tx)) *virtualBatchStorer_AddVirtualBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.VirtualBatch), args[2].(entities.Tx))
	})
	return _c
}

func (_c *virtualBatchStorer_AddVirtualBatch_Call) Return(_a0 error) *virtualBatchStorer_AddVirtualBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *virtualBatchStorer_AddVirtualBatch_Call) RunAndReturn(run func(context.Context, *entities.VirtualBatch, entities.Tx) error) *virtualBatchStorer_AddVirtualBatch_Call {
	_c.Call.Return(run)
	return _c
}

// GetVirtualBatchByBatchNumber provides a mock function with given fields: ctx, batchNumber, dbTx
func (_m *virtualBatchStorer) GetVirtualBatchByBatchNumber(ctx context.Context, batchNumber uint64, dbTx entities.Tx) (*entities.VirtualBatch, error) {
	ret := _m.Called(ctx, batchNumber, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for GetVirtualBatchByBatchNumber")
	}

	var r0 *entities.VirtualBatch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, entities.Tx) (*entities.VirtualBatch, error)); ok {
		return rf(ctx, batchNumber, dbTx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, entities.Tx) *entities.VirtualBatch); ok {
		r0 = rf(ctx, batchNumber, dbTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.VirtualBatch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, entities.Tx) error); ok {
		r1 = rf(ctx, batchNumber, dbTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// virtualBatchStorer_GetVirtualBatchByBatchNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVirtualBatchByBatchNumber'
type virtualBatchStorer_GetVirtualBatchByBatchNumber_Call struct {
	*mock.Call
}

// GetVirtualBatchByBatchNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - batchNumber uint64
//   - dbTx entities.Tx
func (_e *virtualBatchStorer_Expecter) GetVirtualBatchByBatchNumber(ctx interface{}, batchNumber interface{}, dbTx interface{}) *virtualBatchStorer_GetVirtualBatchByBatchNumber_Call {
	return &virtualBatchStorer_GetVirtualBatchByBatchNumber_Call{Call: _e.mock.On("GetVirtualBatchByBatchNumber", ctx, batchNumber, dbTx)}
}

func (_c *virtualBatchStorer_GetVirtualBatchByBatchNumber_Call) Run(run func(ctx context.Context, batchNumber uint64, dbTx entities.Tx)) *virtualBatchStorer_GetVirtualBatchByBatchNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(entities.Tx))
	})
	return _c
}

func (_c *virtualBatchStorer_GetVirtualBatchByBatchNumber_Call) Return(_a0 *entities.VirtualBatch, _a1 error) *virtualBatchStorer_GetVirtualBatchByBatchNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *virtualBatchStorer_GetVirtualBatchByBatchNumber_Call) RunAndReturn(run func(context.Context, uint64, entities.Tx) (*entities.VirtualBatch, error)) *virtualBatchStorer_GetVirtualBatchByBatchNumber_Call {
	_c.Call.Return(run)
	return _c
}

// newVirtualBatchStorer creates a new instance of virtualBatchStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newVirtualBatchStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *virtualBatchStorer {
	mock := &virtualBatchStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
